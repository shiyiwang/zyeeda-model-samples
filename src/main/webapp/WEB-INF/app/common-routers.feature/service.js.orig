var logger          = require('ringo/logging').getLogger(module.id);

var {mark} 			= require('cdeio/mark');
var {json}          = require('cdeio/response');

var {SecurityUtils} = org.apache.shiro;

<<<<<<< local
var {Boolean}           = java.lang;
var {Integer}           = java.lang;
var {String}            = java.lang;
var {Date}              = java.lang;
var {BigDecimal}        = java.math;
var {Field}             = java.lang.reflect;
=======
var {Account}         = com.zyeeda.cdeio.commons.organization.entity;
var {Department}      = com.zyeeda.cdeio.commons.organization.entity;
var {ExecutionInfo}   = com.zyeeda.meterage.meter.entity;
>>>>>>> other

var {SimpleDateFormat} = java.text;
var {DateFormat}       = java.text;

var {ArrayList}         = java.util;
var {HashMap}           = java.util;

var {JSONArray}         = org.json;
var {JSONObject}        = org.json;


var {Department}         = com.zyeeda.coala.commons.organization.entity;
var {Account}            = com.zyeeda.coala.commons.organization.entity;
var {DomainEntity}       = com.zyeeda.coala.commons.base.entity;
var {Company}            = com.zyeeda.meterage.archive.entity;
var {EquipmentLedger}    = com.zyeeda.meterage.archive.entity;
var {ExpEquipment}       = com.zyeeda.meterage.laboratory.entity;
var {ExecutionInfo}      = com.zyeeda.meterage.meter.entity;
var {EnergyMeter}        = com.zyeeda.meterage.meter.entity;
var {CurrentTransformer} = com.zyeeda.meterage.meter.entity;
var {SecondaryDrop}      = com.zyeeda.meterage.meter.entity;
var {VoltageTransformer} = com.zyeeda.meterage.meter.entity;
var {ApprovalHistory}    = com.zyeeda.meterage.process.entity;

/**
 * @Description: 把对象转换成String
 * @param obj
 * @return String
 * @modify
 */
var toString = function(obj) {
    return obj === null ? "" : obj.toString().trim();
};

/**
 * @Description: 从object对象中读取值设置到指定实体的对应属性中
 * @param entity
 * @return entity
 * @modify
 */
var fillEntityFieldWithObject = function(entity, data){
    var baseFields, fields,
        i, f,
        fieldValue, fieldName, fieldType;

    fields = entity.getClass().getDeclaredFields();

    for (i = 0; i < fields.length; i++) {
        f = fields[i];
        f.setAccessible(true);

        fieldName = f.getName();
        fieldType = f.getType();

        if(toString(fieldType).equals("class java.lang.String")){
            try {
                fieldValue = data.get(fieldName);
                if(isNotBlank(fieldValue)){
                    f.set(entity, new String(fieldValue));
                }
            } catch (e) {
                logger.error('系统错误，请联系系统管理员，错误信息：' + e.getMessage());
            }
        }else if(toString(fieldType).equals("class java.lang.Integer")){
            try {
                fieldValue = data.get(fieldName);
                if(isNotBlank(fieldValue)){
                    f.set(entity, new Integer(fieldValue));
                }
            } catch (e) {
                logger.error('系统错误，请联系系统管理员，错误信息：' + e.getMessage());
            }
        }else if(toString(fieldType).equals("class java.lang.Boolean")){
            try {
                fieldValue = data.get(fieldName);
                if(isNotBlank(fieldValue)){
                    f.set(entity, new Boolean(fieldValue));
                }
            } catch (e) {
                logger.error('系统错误，请联系系统管理员，错误信息：' + e.getMessage());
            }
        }else if(toString(fieldType).equals("class java.util.Date")){
            try {
                fieldValue = data.get(fieldName);
                if(isNotBlank(fieldValue)){
                    f.set(entity, stringToDate(fieldValue,"yyyy-MM-dd"));
                }
            } catch (e) {
                logger.error('系统错误，请联系系统管理员，错误信息：' + e.getMessage());
            }
        } else if(toString(fieldType).equals("class java.math.BigDecimal")){
            try {
                fieldValue = data.get(fieldName);
                if(isNotBlank(fieldValue)){
                    f.set(entity, new BigDecimal(fieldValue));
                }
            } catch (e) {
                logger.error('系统错误，请联系系统管理员，错误信息：' + e.getMessage());
            }
        }
        f.setAccessible(false);
    }

    return entity;
};

var parseInteger = function(str){
    try{
        return Integer.parseInteger(str);
    }catch(e){
        return null;
    }
};

/**
  * 首字母大写
  */
var upperHeadChar = function(str){
    var head;

    head = str.substring(0, 1);

    return head.toUpperCase() + str.substring(1, str.length());
};

/**
 * 判断参数是否不为空或空字符串
 *
 * @param obj
 * @return true:不为空,false:为空
 */
var isNotBlank = function(obj) {
    if (null === obj || "".equals(toString(obj)) || "null".equalsIgnoreCase(toString(obj))) {
        return false;
    }
    return true;
};

/**
 * 字符串转换到时间格式
 * @param dateStr 需要转换的字符串
 * @param formatStr 需要格式的目标字符串  举例 yyyy-MM-dd
 * @return Date 返回转换后的时间
 */
var stringToDate = function(dateStr, formatStr) {
    var sdf, date;

    dateStr = toString(dateStr);
    //本文件中需转换的字符串有两种类型("2014-07-14 00:00:00","2014-07-14")
    //根据字符串的长度使用合适的formatStr
    if(dateStr.length > 10 && formatStr === 'yyyy-MM-dd'){
        dateStr = dateStr.substring(0,10);
    }
    sdf = new SimpleDateFormat(formatStr);
    try {
        date = sdf.parse(dateStr);
    } catch (e) {
        logger.error('系统错误，请联系系统管理员，错误信息：' + e.getMessage());
    }
    return date;
}

var updateExecInfo = mark('managers', ExecutionInfo, EquipmentLedger, EnergyMeter).mark('tx').on(function (execMgr, expMgr, energyMeterMgr, data){
    var i,
        execInfo,
        execInfoData,
        execInfos,
        jsonExecInfos,
        execInfoList;

    execInfoList = [];
    execInfosMap = {};

    jsonExecInfos = data.getJSONObject(0).get("execInfos");
    execInfos = execMgr.getAll();

    for (i = 0; i < execInfos.size(); i++) {
        execInfosMap[execInfos.get(i).id] = execInfos.get(i);
    }

    for (i = 0; i < jsonExecInfos.length(); i++) {
        execInfoData = jsonExecInfos.getJSONObject(i);
        //根据id查询离线系统中是否有该检定执行数据
        execInfo = execInfosMap[execInfoData.get("id")];

        //如果有该数据取出该数据进行更新，没有则新增。
        if(!execInfo){
            execInfo = new ExecutionInfo();
            execInfo.id = execInfoData.get("id");
            execInfo = fillEntityFieldWithObject(execInfo, execInfoData);
            execInfo.equipmentLedger = expMgr.find(execInfoData.get("equipmentLedger").get("id"));
            execInfo.lastModifiedTime = stringToDate(execInfoData.get("lastModifiedTime"), 'yyyy-MM-dd HH:mm:ss');
            execInfo.createdTime = stringToDate(execInfoData.get("createdTime"), 'yyyy-MM-dd HH:mm:ss');

        }else if (execInfo.lastModifiedTime.getTime() < stringToDate(execInfoData.get("lastModifiedTime"), 'yyyy-MM-dd HH:mm:ss').getTime() || execInfoData.get("execStatus") === '2'){

            execInfo = fillEntityFieldWithObject(execInfo, execInfoData);
            execInfo.equipmentLedger = expMgr.find(execInfoData.get("equipmentLedger").get("id"));
            execInfo.lastModifiedTime = stringToDate(execInfoData.get("lastModifiedTime"), 'yyyy-MM-dd HH:mm:ss');
            execInfo.createdTime = stringToDate(execInfoData.get("createdTime"), 'yyyy-MM-dd HH:mm:ss');
        }
        execInfoList.push(execInfo);
    }
    //对检定执行进行更新保存
    execMgr.merge.apply(execMgr.merge, execInfoList);
});

//更新检定信息
var updateMeter = mark('managers', ExecutionInfo, EquipmentLedger, EnergyMeter, ExpEquipment, VoltageTransformer, CurrentTransformer, SecondaryDrop).mark('tx').on(function (execMgr, equipmentMgr, energyMeterMgr, expMgr, voltageMgr, currentMgr, secondaryDropMgr, data){
    var i,
        jsonExecInfos,
        energyMeter,
        voltageMeter,
        currentMeter,
        secondaryDropMeter,
        execInfoData,
        energyMeterList,
        voltageMeterList,
        currentMeterList,
        secondaryDropMeterList;

        energyMeterList = [];
        voltageMeterList = [];
        currentMeterList = [];
        secondaryDropMeterList = [];

        jsonExecInfos = data.getJSONObject(0).get("execInfos");

        for (i = 0; i < jsonExecInfos.length(); i++) {
            execInfoData = jsonExecInfos.getJSONObject(i);
            if (isNotBlank(execInfoData.get("energyMeter"))) {
                energyMeter = energyMeterMgr.find(execInfoData.get("energyMeter").get("id"));
                if (!energyMeter) {
                    energyMeter = new EnergyMeter();
                    energyMeter.id = execInfoData.get("energyMeter").get("id");
                }
                energyMeter = fillEntityFieldWithObject(energyMeter, execInfoData.get("energyMeter"));
                energyMeter.executionInfo = execMgr.find(execInfoData.get("id"));
                if ("" !== execInfoData.get("energyMeter").get("expEquipment")) {
                    energyMeter.expEquipment = expMgr.find(execInfoData.get("energyMeter").get("expEquipment").get("id"));
                }
                if (isNotBlank(execInfoData.get("energyMeter").get("mainEqu"))) {
                    energyMeter.mainEqu = equipmentMgr.find(execInfoData.get("energyMeter").get("mainEqu").get("id"));
                }
                if (isNotBlank(execInfoData.get("energyMeter").get("auxiliaryEqu"))) {
                    energyMeter.auxiliaryEqu = equipmentMgr.find(execInfoData.get("energyMeter").get("auxiliaryEqu").get("id"));
                }
                energyMeterList.push(energyMeter);
            }else if (isNotBlank(execInfoData.get("voltageTransformer"))) {
                voltageMeter = voltageMgr.find(execInfoData.get("voltageTransformer").get("id"));
                if (!voltageMeter) {
                    voltageMeter = new VoltageTransformer();
                    voltageMeter.id = execInfoData.get("voltageTransformer").get("id");
                }
                voltageMeter = fillEntityFieldWithObject(voltageMeter, execInfoData.get("voltageTransformer"));
                voltageMeter.executionInfo = execMgr.find(execInfoData.get("id"));
                if (isNotBlank(execInfoData.get("voltageTransformer").get("expEquipment"))) {
                    voltageMeter.expEquipment = expMgr.find(execInfoData.get("voltageTransformer").get("expEquipment").get("id"));
                }
                if (isNotBlank(execInfoData.get("voltageTransformer").get("voltageEqu"))) {
                    voltageMeter.voltageEqu = equipmentMgr.find(execInfoData.get("voltageTransformer").get("voltageEqu").get("id"));
                }
                voltageMeterList.push(voltageMeter);
            }else if (isNotBlank(execInfoData.get("currentTransformer"))) {
                currentMeter = currentMgr.find(execInfoData.get("currentTransformer").get("id"));
                if (!currentMeter) {
                    currentMeter = new CurrentTransformer();
                    currentMeter.id = execInfoData.get("currentTransformer").get("id");
                }
                currentMeter = fillEntityFieldWithObject(currentMeter, execInfoData.get("currentTransformer"));
                currentMeter.executionInfo = execMgr.find(execInfoData.get("id"));
                if (isNotBlank(execInfoData.get("currentTransformer").get("expEquipment"))) {
                    currentMeter.expEquipment = expMgr.find(execInfoData.get("currentTransformer").get("expEquipment").get("id"));
                }
                if (isNotBlank(execInfoData.get("currentTransformer").get("currentEqu"))) {
                    currentMeter.currentEqu = equipmentMgr.find(execInfoData.get("currentTransformer").get("currentEqu").get("id"));
                }
                currentMeterList.push(currentMeter);
            }else if (isNotBlank(execInfoData.get("secondaryDrop"))) {
                secondaryDropMeter = secondaryDropMgr.find(execInfoData.get("secondaryDrop").get("id"));
                if (!secondaryDropMeter) {
                    secondaryDropMeter = new SecondaryDrop();
                    secondaryDropMeter.id = execInfoData.get("secondaryDrop").get("id");
                }
                secondaryDropMeter = fillEntityFieldWithObject(secondaryDropMeter, execInfoData.get("secondaryDrop"));
                secondaryDropMeter.executionInfo = execMgr.find(execInfoData.get("id"));
                if (isNotBlank(execInfoData.get("secondaryDrop").get("expEquipment"))) {
                    secondaryDropMeter.expEquipment = expMgr.find(execInfoData.get("secondaryDrop").get("expEquipment").get("id"));
                }
                if (isNotBlank(execInfoData.get("secondaryDrop").get("voltageEqu"))) {
                    secondaryDropMeter.voltageEqu = equipmentMgr.find(execInfoData.get("secondaryDrop").get("voltageEqu").get("id"));
                }
                if (isNotBlank(execInfoData.get("secondaryDrop").get("currentEqu"))) {
                    secondaryDropMeter.currentEqu = equipmentMgr.find(execInfoData.get("secondaryDrop").get("currentEqu").get("id"));
                }
                secondaryDropMeterList.push(secondaryDropMeter);
            }
        }
    //对电能表检定信息进行更新保存
    energyMeterMgr.merge.apply(energyMeterMgr.merge, energyMeterList);
    //对电压互感器检定信息进行更新保存
    voltageMgr.merge.apply(voltageMgr.merge, voltageMeterList);
    //对电流互感器检定信息进行更新保存
    currentMgr.merge.apply(currentMgr.merge, currentMeterList);
    //对二次压降检定信息进行更新保存
    secondaryDropMgr.merge.apply(secondaryDropMgr.merge, secondaryDropMeterList);
});

exports.createService = function () {
    return {
        // 获取当前用户所属单位(返回台帐部门对象)
        getCurrentUnit: mark('managers', Company, Account, Department).mark('tx').on(function (compMgr, accountMgr, deptMgr) {
            var currSessionUser, currUser, deptPath, deptPathArr, currDept;

            currSessionUser = SecurityUtils.getSubject().getPrincipal();
            currUser = accountMgr.find(currSessionUser.id);

            if(currUser.department){
                deptPath = currUser.department.path || '';
                deptPathArr = deptPath.split('/');
                if(deptPathArr.length > 1){
                    currDept = deptMgr.find(deptPathArr[1]);
                }
            }

            if(currDept.code){
                return compMgr.getCompanyByCode({companyCode: currDept.code}, 1);
            }

            return new Company();
        }),
        getAllCompanyUnit: mark('managers', Company).mark('tx').on(function (compMgr) {
            var company, companys, results, obj;

            obj = {};
            results = [];

            results.push({id: '全部', text: '全部'});
            companys = compMgr.getCompanyByType({companyType: '1'});

            for (var i = 0; i < companys.size(); i++) {
                company = companys.get(i);
                if ('检修试验中心' != company.name){
                    results.push({id: company.name, text: company.name});
                }
            };
            return results;
        }),
        getEntryApprovalHistory: mark('managers', ApprovalHistory).mark('tx').on(function (apprHisMgr, entryId) {
            return apprHisMgr.getApprovalHistorysByEntryId({entryId: entryId});
        }),
        //获取所有部门数据
        getAllDepartments: mark('managers', Department).mark('tx').on(function (deptMgr) {
            return deptMgr.getAll();
        }),
        //获取所有用户数据
        getAllAccounts: mark('managers', Account).mark('tx').on(function (accMgr) {
            return accMgr.getAll();
        }),
        //获取厂站线路数据
        getAllCompanys: mark('managers', Company).mark('tx').on(function (companyMgr, time){
            return companyMgr.getAllCompanysByUpdateTime({updateTime: stringToDate(time,"yyyy-MM-dd")});
        }),
        //获取台帐数据
        getAllEquipmentLedgersOutOfCollector: mark('managers', EquipmentLedger, ExpEquipment).mark('tx').on(function (equMgr, expEquipmentMgr, time){
            var equipmentLedgers,
                expEquipments,
                i,
                energyTransformersList,
                secondDropsList,
                results;

            results = {};
            energyTransformersList = [];
            secondDropsList = [];

            //获取电能表、电压互感器、电流互感器、电压二次回路、电流二次回路
            equipmentLedgers = equMgr.getAllEquipmentLedgersByUpdateTime({updateTime: stringToDate(time,"yyyy-MM-dd")});
            //获取实验室设备
            expEquipments = expEquipmentMgr.getExpEquipmentsByUpdateTime({updateTime: stringToDate(time,"yyyy-MM-dd")});

            for (i = 0; i < equipmentLedgers.size(); i++) {
                if ('1' === equipmentLedgers.get(i).equipmentType || '2' === equipmentLedgers.get(i).equipmentType || '3' === equipmentLedgers.get(i).equipmentType) {
                    energyTransformersList.push(equipmentLedgers.get(i));
                }else if ('4' === equipmentLedgers.get(i).equipmentType || '5' === equipmentLedgers.get(i).equipmentType ) {
                    secondDropsList.push(equipmentLedgers.get(i));
                }
            }

            results = {energyTransformers: energyTransformersList, secondDrops: secondDropsList, expEquipments: expEquipments};

            return results;
        }),
        //获取检定执行数据
        getAllExecInfos: mark('managers', ExecutionInfo).mark('tx').on(function (execInfoMgr){
            return execInfoMgr.getAll();
        }),
        //更新离线系统的检定执行信息到在线系统
        updateExecInfos: mark('tx').on(function(data) {

            //更新检定执行数据
            updateExecInfo(data);
            //更新电能表、电压互感器、电流互感器、二次压降检定信息
            updateMeter(data);
        })
	};
};
