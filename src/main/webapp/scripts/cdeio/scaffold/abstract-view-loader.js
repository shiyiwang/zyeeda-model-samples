// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'cdeio/core/view', 'cdeio/core/config'], function($, _, View, config) {
    var getPath, getPermissionId, permMap, result;
    getPath = config.getPath;
    result = {};
    permMap = {
      refresh: 'show'
    };
    getPermissionId = function(id) {
      if (permMap[id]) {
        return permMap[id];
      } else {
        return id;
      }
    };
    result.templates = {
      buttonGroup: _.template('<div class="btn-group">\n    <%= buttons %>\n</div>'),
      operator: _.template('<button id="<%= id %>" class="btn <% if (style) { %> <%=style%> <% } %>" title="<%=title%>" onclick="return false;" style="display:none;">\n    <% if (icon) { %>\n    <i class="<%= icon %> <% if (!label) { %>icon-only<% } %>" />\n    <% } %>\n\n    <% if (label) { %>\n    <%= label %>\n    <% } %>\n</button>'),
      grid: '<table style="width:100%;" id="grid" />',
      tree: '<ul id="tree" class="ztree"/>',
      blank: '<table style="width:100%;" id="grid" />'
    };
    result.getDialogTitle = function(view, type, prefix) {
      var dt, _ref;
      dt = (_ref = view.feature.options.scaffold) != null ? _ref.defineDialogTitle : void 0;
      if (_.isFunction(dt)) {
        return dt.apply(view, [view, type]);
      } else if (_.isObject(dt)) {
        return dt[type];
      }
      if (view.options.entityLabel) {
        return prefix + view.options.entityLabel;
      }
      return prefix;
    };
    result.initOperatorsVisibility = function(operators) {
      var $op, o, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = operators.length; _i < _len; _i++) {
        o = operators[_i];
        if (this.feature.isPermitted(getPermissionId(o.id))) {
          $op = this.$(o.id);
          if ((_ref = o.show) === 'always' || _ref === 'unselected') {
            _results.push($op.show());
          } else {
            _results.push($op.hide());
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    result.ensureOperatorsVisibility = function(operators, selected) {
      var $op, o, _i, _len, _ref, _ref1, _ref2, _results;
      _results = [];
      for (_i = 0, _len = operators.length; _i < _len; _i++) {
        o = operators[_i];
        if (this.feature.isPermitted(getPermissionId(o.id))) {
          if (o.show === 'always') {
            continue;
          }
          $op = this.$(o.id);
          if (!o.show) {
            o.show = 'selected';
          }
          if (selected) {
            if (_.isArray(selected)) {
              if (selected.length === 0) {
                if (o.show === 'unselected') {
                  _results.push($op.show());
                } else {
                  _results.push($op.hide());
                }
              } else if (selected.length === 1) {
                if ((_ref = o.show) === 'selected' || _ref === 'single-selected') {
                  _results.push($op.show());
                } else {
                  _results.push($op.hide());
                }
              } else {
                if ((_ref1 = o.show) === 'selected' || _ref1 === 'multi-selected') {
                  _results.push($op.show());
                } else {
                  _results.push($op.hide());
                }
              }
            } else {
              if (!o.show || ((_ref2 = o.show) === 'selected' || _ref2 === 'single-selected')) {
                _results.push($op.show());
              } else {
                _results.push($op.hide());
              }
            }
          } else {
            if (o.show === 'unselected') {
              _results.push($op.show());
            } else {
              _results.push($op.hide());
            }
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    result.extendEventHandlers = function(view, handlers) {
      var eventHandlers, scaffold;
      scaffold = view.feature.options.scaffold || {};
      eventHandlers = _.extend({}, handlers, scaffold.handlers);
      return _.extend(view.eventHandlers, eventHandlers);
    };
    result.submitHandler = function(options, viewName, title, type) {
      var app, id, ok, scaffold, view;
      view = this.feature.views[viewName];
      id = view.model.get('id');
      app = this.feature.module.getApplication();
      scaffold = this.feature.options.scaffold || {};
      if (_.isFunction(scaffold.beforeShowDialog)) {
        if ((scaffold.beforeShowDialog.call(view, type, view)) !== true) {
          view.model.clear();
          return;
        }
      }
      ok = function() {
        view.submit({
          id: id
        }).done(function(data) {
          options.submitSuccess(type);
          app._modalDialog.modal.modal('hide');
          if (_.isFunction(scaffold.afterCloseDialog)) {
            return scaffold.afterCloseDialog.call(view, type, view, data);
          }
        });
        return false;
      };
      return app.showDialog({
        view: view,
        title: title,
        buttons: [
          {
            label: '确定',
            status: 'btn-primary',
            fn: ok
          }
        ],
        onClose: function() {
          return view.model.clear();
        }
      }).done(function(dialog) {
        view.setFormData(view.model.toJSON());
        if (_.isFunction(scaffold.afterShowDialog)) {
          return scaffold.afterShowDialog.call(view, type, view, view.model.toJSON());
        }
      });
    };
    result.generateOperatorsView = function(options, module, feature, deferred) {
      return feature.request({
        url: options.url || 'configuration/operators'
      }).done(function(data) {
        var delegates, events, group, groupNames, groups, name, o, opGroups, ops, value, view, viewOptions, _i, _len;
        events = {};
        delegates = {};
        ops = [];
        opGroups = {};
        for (name in data) {
          value = data[name];
          if (_.isString(value)) {
            value = {
              label: value
            };
          }
          value.id = name;
          value.style || (value.style = 'btn-primary');
          value.label || (value.label = '');
          value.title || (value.title = value.label);
          group = value.group || 'default';
          groups = opGroups[group] || (opGroups[group] = []);
          groups.push(value);
          ops.push(value);
        }
        for (name in opGroups) {
          value = opGroups[name];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            o = value[_i];
            if (!o.icon) {
              o.icon = 'icon-file';
            }
            o.HTML = result.templates.operator(o);
            if (!o.order) {
              o.order = 10000;
            }
            events['click ' + o.id] = o.id;
            if (o.publish === true) {
              delegates['click ' + o.id] = 'click:' + o.id;
            }
          }
          opGroups[name] = _.sortBy(value, function(item) {
            return item.order;
          });
        }
        groupNames = _.keys(opGroups).sort();
        events['click filter'] = 'toggleFilter';
        viewOptions = {
          baseName: 'operators',
          module: module,
          feature: feature,
          events: events,
          delegates: delegates,
          operators: ops,
          avoidLoadingHandlers: true,
          extend: {
            renderHtml: function(su, data) {
              var html, template, v;
              html = ((function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = groupNames.length; _j < _len1; _j++) {
                  name = groupNames[_j];
                  _results.push(result.templates.buttonGroup({
                    buttons: ((function() {
                      var _k, _len2, _ref, _results1;
                      _ref = opGroups[name];
                      _results1 = [];
                      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                        v = _ref[_k];
                        _results1.push(v.HTML);
                      }
                      return _results1;
                    })()).join('')
                  }));
                }
                return _results;
              })()).join('');
              if (this.feature.options.haveFilter && this.feature.isPermitted('show')) {
                html += '<div class="pull-right btn-group"><button id="filter" class="btn btn-success c-filter-toggle"><i class="icon-filter"/></button></div>';
              }
              template = Handlebars.compile(html);
              return template(data);
            }
          }
        };
        view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
        result.extendEventHandlers(view, options.handlers);
        view.eventHandlers.toggleFilter = function() {
          var btns, filterBtn, filterForm, grid, resetBtn;
          filterForm = this.feature.views['form:filter'];
          filterForm.formData = filterForm.getFormData() || {};
          grid = filterForm.feature.views['grid:body'].components[0];
          btns = [];
          filterBtn = {
            label: '查询',
            status: 'btn-info',
            fn: (function(_this) {
              return function() {
                app.filterForm = filterForm;
                grid.effectiveFilters = filterForm.getFilters();
                grid.addFilters(grid.effectiveFilters);
                grid.refresh();
                return true;
              };
            })(this)
          };
          resetBtn = {
            label: '重置',
            status: 'btn-warning',
            fn: (function(_this) {
              return function() {
                grid.removeFilters(grid.effectiveFilters);
                delete grid.effectiveFilters;
                filterForm.reset();
                grid.refresh();
                return false;
              };
            })(this)
          };
          btns.push(filterBtn);
          btns.push(resetBtn);
          return app.showDialog({
            view: filterForm,
            onClose: function() {},
            title: '条件查询',
            buttons: btns
          }).done(function() {
            return filterForm.setFormData(filterForm.formData);
          });
        };
        return deferred.resolve(view);
      });
    };
    result.generateTabsView = function(options, module, feature, deferred) {
      var delegates, events, view, viewOptions;
      events = {};
      delegates = {};
      viewOptions = {
        baseName: 'tabs',
        module: module,
        feature: feature,
        events: events,
        delegates: delegates,
        avoidLoadingHandlers: true,
        events: events,
        extend: {
          renderHtml: function(su, data) {}
        }
      };
      view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
      result.extendEventHandlers(view, options.handlers);
      return deferred.resolve(view);
    };
    result.generateBlankView = function(options, module, feature, deferred) {
      var data, events, view, viewOptions;
      data = {};
      _.extend(data, feature.options.gridOptions, feature.startupOptions.gridOptions);
      events = {};
      viewOptions = {
        baseName: 'grid',
        module: module,
        feature: feature,
        components: [data],
        avoidLoadingHandlers: true,
        events: events,
        extend: {
          renderHtml: function(su, data) {
            return result.templates.blank;
          }
        }
      };
      view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
      result.extendEventHandlers(view, options.handlers);
      return deferred.resolve(view);
    };
    result.generateGridView = function(options, module, feature, deferred) {
      return feature.request({
        url: options.url || 'configuration/grid'
      }).done(function(data) {
        var events, view, viewOptions;
        data.type = 'grid';
        data.selector = 'grid';
        data.pager = 'pager';
        _.extend(data, feature.options.gridOptions, feature.startupOptions.gridOptions);
        events = _.extend({
          'window#resize': 'adjustGridHeight',
          'xhr': 'deferAdjustGridHeight'
        }, data.events);
        viewOptions = {
          baseName: 'grid',
          module: module,
          feature: feature,
          components: [data],
          avoidLoadingHandlers: true,
          events: events,
          extend: {
            renderHtml: function(su, data) {
              return result.templates.grid;
            }
          }
        };
        view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
        result.extendEventHandlers(view, options.handlers);
        return deferred.resolve(view);
      });
    };
    result.generateTreeView = function(options, module, feature, deferred) {
      return feature.request({
        url: options.url || 'configuration/tree'
      }).done(function(data) {
        var view, viewOptions;
        if (data === 'undefined') {
          data = {};
        }
        data.type = 'tree';
        data.selector = 'tree';
        viewOptions = {
          baseName: 'tree',
          module: module,
          feature: feature,
          components: [data],
          events: data.events || {},
          avoidLoadingHandlers: true,
          extend: {
            renderHtml: function(su, data) {
              return result.templates.tree;
            }
          }
        };
        view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
        result.extendEventHandlers(view, options.handlers);
        return deferred.resolve(view);
      });
    };
    return result;
  });

}).call(this);
