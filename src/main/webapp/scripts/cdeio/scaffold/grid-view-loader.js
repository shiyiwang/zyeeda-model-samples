// Generated by CoffeeScript 1.8.0
define(['jquery', 'underscore', 'cdeio/core/view', 'cdeio/core/config', 'cdeio/scaffold/abstract-view-loader'], function($, _, View, config, viewLoader) {
  var handlers, resetGridHeight;
  handlers = {
    add: function() {
      return viewLoader.submitHandler.call(this, {
        submitSuccess: (function(_this) {
          return function(type) {
            return _this.feature.views['grid:body'].components[0].refresh();
          };
        })(this)
      }, 'form:add', viewLoader.getDialogTitle(this.feature.views['form:add'], 'add', '新增'), 'add');
    },
    edit: function() {
      var app, grid, selected, view;
      grid = this.feature.views['grid:body'].components[0];
      view = this.feature.views['form:edit'];
      app = this.feature.module.getApplication();
      selected = grid.getSelected();
      if (!selected) {
        return app.info('请选择要操作的记录');
      }
      if (selected instanceof Array) {
        selected = selected[0];
      }
      view.model.set(selected);
      return $.when(view.model.fetch()).then((function(_this) {
        return function() {
          return viewLoader.submitHandler.call(_this, {
            submitSuccess: function(type) {
              return _this.feature.views['grid:body'].components[0].refresh();
            }
          }, 'form:edit', viewLoader.getDialogTitle(_this.feature.views['form:edit'], 'edit', '编辑'), 'edit');
        };
      })(this));
    },
    del: function() {
      var app, grid, gridView, scaffold, selected, _handlers;
      gridView = this.feature.views['grid:body'];
      grid = gridView.components[0];
      selected = grid.getSelected();
      app = this.feature.module.getApplication();
      if (!selected) {
        return app.info('请选择要操作的记录');
      }
      scaffold = gridView.feature.options.scaffold || {};
      _handlers = scaffold.handlers || {};
      return app.confirm('确定要删除选中的记录吗?', (function(_this) {
        return function(confirmed) {
          var data, _i, _len;
          if (!confirmed) {
            return;
          }
          for (_i = 0, _len = selected.length; _i < _len; _i++) {
            data = selected[_i];
            if (_.isFunction(_handlers.beforeDel)) {
              if ((_handlers.beforeDel.call(gridView, gridView, grid, data.toJSON())) === false) {
                return;
              }
            }
            _this.feature.model.set(data);
            $.when(_this.feature.model.destroy()).then(function(data) {
              return grid.refresh();
            }).always(function() {
              return _this.feature.model.clear();
            });
          }
        };
      })(this));
    },
    show: function() {
      var app, grid, selected, view;
      grid = this.feature.views['grid:body'].components[0];
      view = this.feature.views['form:show'];
      selected = grid.getSelected();
      app = this.feature.module.getApplication();
      if (!selected) {
        return app.info('请选择要操作的记录');
      }
      if (selected instanceof Array) {
        selected = selected[0];
      }
      view.model.set(selected);
      return $.when(view.model.fetch()).then((function(_this) {
        return function() {
          return app.showDialog({
            view: view,
            onClose: function() {
              return view.model.clear();
            },
            title: viewLoader.getDialogTitle(_this.feature.views['form:show'], 'show', '查看'),
            buttons: []
          }).done(function() {
            var scaffold;
            view.setFormData(view.model.toJSON());
            scaffold = view.feature.options.scaffold || {};
            if (_.isFunction(scaffold.afterShowDialog)) {
              return scaffold.afterShowDialog.call(view, 'show', view, view.model.toJSON());
            }
          });
        };
      })(this));
    },
    refresh: function() {
      var grid;
      grid = this.feature.views['grid:body'].components[0];
      return grid.refresh();
    }
  };
  resetGridHeight = function(table) {
    var el, height;
    el = $('.dataTables_scrollBody');
    if (el.size() === 0) {
      return;
    }
    height = $(document.body).height() - el.offset().top - 5;
    height = height < 0 ? 0 : height;
    el.height(height);
    table.fnSettings().oInit.sScrollY = height;
    if (el[0].clientWidth < el[0].offsetWidth - 4) {
      return $('.dataTables_scrollHead').css('width', el.width() - 15);
    }
  };
  return {
    type: 'view',
    name: 'grid',
    fn: function(module, feature, viewName, args) {
      var deferred, initVisibility, scaffold, visibility;
      deferred = $.Deferred();
      if (viewName === 'toolbar') {
        viewLoader.generateOperatorsView({
          handlers: handlers
        }, module, feature, deferred);
      } else if (viewName === 'body') {
        scaffold = feature.options.scaffold || {};
        visibility = scaffold.ensureOperatorsVisibility || viewLoader.ensureOperatorsVisibility;
        initVisibility = scaffold.initOperatorsVisibility || viewLoader.initOperatorsVisibility;
        viewLoader.generateGridView({
          createView: function(options) {
            options.events || (options.events = {});
            options.events['selectionChanged grid'] = 'selectionChanged';
            options.events['draw grid'] = 'refresh';
            return new View(options);
          },
          handlers: {
            selectionChanged: function(e, models) {
              var v;
              v = this.feature.views['grid:toolbar'];
              return visibility.call(v, v.options.operators, models);
            },
            refresh: function() {
              var v;
              v = this.feature.views['grid:toolbar'];
              return initVisibility.call(v, v.options.operators);
            },
            adjustGridHeight: function() {
              if (this.components && this.components[0]) {
                return resetGridHeight(this.components[0]);
              }
            },
            deferAdjustGridHeight: function() {
              return _.defer((function(_this) {
                return function() {
                  if (_this.components && _this.components[0]) {
                    return resetGridHeight(_this.components[0]);
                  }
                };
              })(this));
            }
          }
        }, module, feature, deferred);
      }
      return deferred;
    }
  };
});
