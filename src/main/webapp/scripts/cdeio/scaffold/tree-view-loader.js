// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'cdeio/core/view', 'cdeio/core/config', 'cdeio/scaffold/abstract-view-loader'], function($, _, View, config, viewLoader) {
    var handlers;
    handlers = {
      add: function() {
        var selected, tree;
        this.feature.views['form:add'].model.clear();
        tree = this.feature.views['tree:body'].components[0];
        selected = tree.getSelectedNodes()[0];
        if (selected) {
          this.feature.views['form:add'].model.set('parent', selected);
        }
        return viewLoader.submitHandler.call(this, {
          submitSuccess: (function(_this) {
            return function() {
              _this.feature.views['form:add'].model.set({
                isParent: true
              });
              if (!selected) {
                selected = tree.getNodeByParam('id', '-1');
              }
              if (selected && selected['__inited__'] === true) {
                return tree.addNodes(selected, _this.feature.views['form:add'].model.toJSON(), false);
              } else {
                return tree.expandNode(selected, true, false, true, true);
              }
            };
          })(this)
        }, 'form:add', viewLoader.getDialogTitle(this.feature.views['form:add'], 'add', '新增'), 'add');
      },
      edit: function() {
        var app, selected, tree, view;
        tree = this.feature.views['tree:body'].components[0];
        view = this.feature.views['form:edit'];
        app = this.feature.module.getApplication();
        selected = tree.getSelectedNodes()[0];
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set(selected);
        return $.when(view.model.fetch()).then((function(_this) {
          return function() {
            return viewLoader.submitHandler.call(_this, {
              submitSuccess: function() {
                _.extend(selected, view.model.toJSON());
                return tree.refresh();
              }
            }, 'form:edit', viewLoader.getDialogTitle(_this.feature.views['form:edit'], 'edit', '编辑'), 'edit');
          };
        })(this));
      },
      del: function() {
        var app, scaffold, selected, tree, treeView, _handlers;
        treeView = this.feature.views['tree:body'];
        tree = treeView.components[0];
        selected = tree.getSelectedNodes()[0];
        app = this.feature.module.getApplication();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        scaffold = treeView.feature.options.scaffold || {};
        _handlers = scaffold.handlers || {};
        if (_.isFunction(_handlers.beforeDel)) {
          if ((_handlers.beforeDel.call(treeView, treeView, tree, selected.toJSON())) === false) {
            return;
          }
        }
        return app.confirm('确定要删除选中的记录吗?', (function(_this) {
          return function(confirmed) {
            if (!confirmed) {
              return;
            }
            _this.feature.model.set('id', selected.id);
            return $.when(_this.feature.model.destroy()).then(function(data) {
              return tree.removeNode(selected);
            });
          };
        })(this));
      },
      show: function() {
        var app, selected, tree, view;
        app = this.feature.module.getApplication();
        tree = this.feature.views['tree:body'].components[0];
        selected = tree.getSelectedNodes()[0];
        view = this.feature.views['form:show'];
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set('id', selected.id);
        return $.when(view.model.fetch()).then((function(_this) {
          return function() {
            return app.showDialog({
              view: view,
              title: viewLoader.getDialogTitle(_this.feature.views['form:show'], 'show', '查看'),
              buttons: []
            }).done(function() {
              var scaffold;
              view.setFormData(view.model.toJSON());
              scaffold = view.feature.options.scaffold || {};
              if (_.isFunction(scaffold.afterShowDialog)) {
                return scaffold.afterShowDialog.call(view, 'show', view, view.model.toJSON());
              }
            });
          };
        })(this));
      },
      refresh: function() {
        var tree;
        tree = this.feature.views['tree:body'].components[0];
        return tree.reload();
      }
    };
    return {
      type: 'view',
      name: 'tree',
      fn: function(module, feature, viewName, args) {
        var deferred, initVisibility, scaffold, visibility;
        scaffold = feature.options.scaffold || {};
        visibility = scaffold.ensureOperatorsVisibility || viewLoader.ensureOperatorsVisibility;
        initVisibility = scaffold.initOperatorsVisibility || viewLoader.initOperatorsVisibility;
        deferred = $.Deferred();
        if (viewName === 'toolbar') {
          viewLoader.generateOperatorsView({
            handlers: handlers
          }, module, feature, deferred);
        } else if (viewName === 'body') {
          viewLoader.generateTreeView({
            createView: function(options) {
              var t;
              options.events.click = 'clearSelection';
              t = options.components[0];
              t.callback || (t.callback = {});
              t.callback.onClick = 'selectionChanged';
              return new View(options);
            },
            handlers: {
              clearSelection: function(e) {
                var name, v;
                name = e.target.tagName;
                if (name === 'LI' || name === 'UL') {
                  this.components[0].cancelSelectedNode();
                  v = this.feature.views['tree:toolbar'];
                  return visibility.call(v, v.options.operators);
                }
              },
              selectionChanged: function(e, treeId, node, status) {
                var v;
                if (!status) {
                  return;
                }
                v = this.feature.views['tree:toolbar'];
                return visibility.call(v, v.options.operators, node.id);
              }
            }
          }, module, feature, deferred);
          deferred.done(function(v) {
            return v.collection.on('reset', function() {
              v = this.feature.views['tree:toolbar'];
              return initVisibility.call(v, v.options.operators);
            });
          });
        }
        return deferred;
      }
    };
  });

}).call(this);
