// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['cdeio/core/view', 'handlebars', 'underscore', 'jquery', 'cdeio/core/form-view', 'cdeio/core/custom-form-view', 'cdeio/core/form/form-field'], function(View, Handlebars, _, $, FormView, CustomFormView, FormField) {
    var GridPickerField, MultiGridPickerField, MultiTreePickerField, TreePickerField;
    GridPickerField = (function(_super) {
      __extends(GridPickerField, _super);

      function GridPickerField() {
        GridPickerField.__super__.constructor.apply(this, arguments);
        this.filterOperator = 'eq';
        this.type = 'grid-picker';
      }

      GridPickerField.prototype.getComponent = function() {
        return {
          selector: 'a-' + this.id,
          id: 'a-' + this.id,
          type: this.type,
          url: this.options.source,
          title: '选择' + this.options.label,
          name: this.name,
          readOnly: this.readOnly,
          remoteDefined: true,
          statusChanger: this.options.statusChanger,
          allowAdd: !!this.options.allowAdd,
          extraFields: this.options.extraFields || [],
          form: this.form,
          multiple: !!this.options.multiple,
          textKey: this.options.textKey
        };
      };

      GridPickerField.prototype.getComponents = function() {
        if (this.readOnly) {
          return [];
        } else {
          return [this.getComponent()];
        }
      };

      GridPickerField.prototype.loadFormData = function(value, data) {
        var picker;
        if (this.readOnly) {
          this.form.$(this.id).text(value != null ? value.name : void 0);
          return this.value = value;
        } else {
          picker = this.form.findComponent('a-' + this.id);
          if (!picker) {
            return;
          }
          return picker.loadData(data);
        }
      };

      GridPickerField.prototype.getFormData = function() {
        var picker, _ref;
        if (this.readOnly) {
          return (_ref = this.value) != null ? _ref.id : void 0;
        } else {
          picker = this.form.findComponent('a-' + this.id);
          if (!picker) {
            return;
          }
          return picker.getFormData();
        }
      };

      GridPickerField.prototype.getTemplateString = function() {
        return '<% if (readOnly) { %>\n    <div class="c-view-form-field">\n        <% if (!hideLabel) { %>\n        <div class="field-label"><%= label %></div>\n        <% } %>\n        <div id="<%= id %>" class="field-value">{{<%= name %>}}</div>\n    </div>\n<% } else { %>\n    <div class="control-group">\n      <% if (!hideLabel) { %>\n      <label class="control-label" for="<%= id %>"><%= label %><% if (required) { %>\n            <span class="required-mark">*</span>\n        <% } %></label><% } %>\n      <div class="controls">\n        <div id="a-<%= id %>"></div>\n      </div>\n    </div>\n<% } %>';
      };

      return GridPickerField;

    })(FormField);
    TreePickerField = (function(_super) {
      __extends(TreePickerField, _super);

      function TreePickerField() {
        TreePickerField.__super__.constructor.apply(this, arguments);
        this.type = 'tree-picker';
      }

      return TreePickerField;

    })(GridPickerField);
    MultiGridPickerField = (function(_super) {
      __extends(MultiGridPickerField, _super);

      function MultiGridPickerField() {
        MultiGridPickerField.__super__.constructor.apply(this, arguments);
        this.type = 'multi-grid-picker';
      }

      MultiGridPickerField.prototype.getComponent = function() {
        var o;
        o = MultiGridPickerField.__super__.getComponent.call(this);
        o.pickerGrid = {
          datatype: 'local',
          colModel: this.options.colModel
        };
        return o;
      };

      return MultiGridPickerField;

    })(GridPickerField);
    MultiTreePickerField = (function(_super) {
      __extends(MultiTreePickerField, _super);

      function MultiTreePickerField() {
        MultiTreePickerField.__super__.constructor.apply(this, arguments);
        this.type = 'multi-tree-picker';
      }

      return MultiTreePickerField;

    })(MultiGridPickerField);
    FormField.add('grid-picker', GridPickerField);
    FormField.add('tree-picker', TreePickerField);
    FormField.add('multi-grid-picker', MultiGridPickerField);
    FormField.add('multi-tree-picker', MultiTreePickerField);
    return {
      type: 'view',
      name: 'form',
      fn: function(module, feature, viewName, args) {
        var deferred;
        deferred = $.Deferred();
        feature.request({
          url: 'configuration/forms/' + viewName,
          success: function(data) {
            var def, view;
            if (data == null) {
              data = {
                groups: []
              };
            }
            def = _.extend({
              baseName: viewName,
              module: module,
              feature: feature,
              avoidLoadingHandlers: true,
              entityLabel: data.entityLabel,
              formName: viewName
            }, data);
            def.form = {
              groups: data.groups,
              tabs: data.tabs
            };
            if (def.custom) {
              view = new CustomFormView(def);
            } else {
              view = new FormView(def);
            }
            view.eventHandlers.formStatusChanged = function(e) {
              var fsc, scaffold, _ref;
              scaffold = this.feature.options.scaffold || {};
              fsc = (_ref = scaffold.handlers) != null ? _ref.formStatusChanged : void 0;
              if (_.isFunction(fsc)) {
                return fsc.call(this, this.getFormData(), $(e.target));
              }
            };
            return deferred.resolve(view);
          }
        });
        return deferred.promise();
      }
    };
  });

}).call(this);
