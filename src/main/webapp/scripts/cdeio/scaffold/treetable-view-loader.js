// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'cdeio/core/view', 'cdeio/core/config', 'cdeio/scaffold/abstract-view-loader'], function($, _, View, config, viewLoader) {
    var handlers;
    handlers = {
      add: function() {
        var grid, rowData, selected;
        this.feature.views['form:add'].model.clear();
        grid = this.feature.views['treetable:body'].components[0];
        selected = grid.getSelected();
        if (selected) {
          rowData = selected.toJSON();
          this.feature.views['form:add'].model.set('parent', rowData);
        }
        return viewLoader.submitHandler.call(this, {
          submitSuccess: (function(_this) {
            return function(type) {
              return grid.refresh();
            };
          })(this)
        }, 'form:add', viewLoader.getDialogTitle(this.feature.views['form:add'], 'add', '新增'));
      },
      edit: function() {
        var app, grid, rowData, selected, view;
        grid = this.feature.views['treetable:body'].components[0];
        view = this.feature.views['form:edit'];
        app = this.feature.module.getApplication();
        selected = grid.getSelected();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set('id', selected.id);
        if (selected) {
          rowData = selected.toJSON();
          this.feature.views['form:edit'].model.set('parent', rowData);
        }
        return $.when(view.model.fetch()).then((function(_this) {
          return function() {
            return viewLoader.submitHandler.call(_this, {
              submitSuccess: function(type) {

                /*
                 */
                return grid.setTreeRow(selected, view.model.toJSON());
              }
            }, 'form:edit', viewLoader.getDialogTitle(_this.feature.views['form:edit'], 'edit', '编辑'));
          };
        })(this));
      },
      del: function() {
        var app, grid, gridView, scaffold, selected, _handlers;
        gridView = this.feature.views['treetable:body'];
        grid = gridView.components[0];
        selected = grid.getGridParam('selrow');
        app = this.feature.module.getApplication();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        scaffold = gridView.feature.options.scaffold || {};
        _handlers = scaffold.handlers || {};
        if (_.isFunction(_handlers.beforeDel)) {
          if ((_handlers.beforeDel.call(gridView, gridView, grid, selected.toJSON())) === false) {
            return;
          }
        }
        return app.confirm('确定要删除选中的记录吗?', (function(_this) {
          return function(confirmed) {
            if (!confirmed) {
              return;
            }
            _this.feature.model.set('id', selected);
            return $.when(_this.feature.model.destroy()).then(function(data) {
              grid.delTreeNode(selected);
              return grid.trigger('reloadGrid');
            });
          };
        })(this));
      },
      show: function() {
        var app, grid, selected, view;
        app = this.feature.module.getApplication();
        grid = this.feature.views['treetable:body'].components[0];
        view = this.feature.views['form:show'];
        selected = grid.getGridParam('selrow');
        app = this.feature.module.getApplication();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set('id', selected);
        return $.when(view.model.fetch()).then((function(_this) {
          return function() {
            return app.showDialog({
              view: view,
              title: viewLoader.getDialogTitle(_this.feature.views['form:show'], 'show', '查看'),
              buttons: []
            }).done(function() {
              var scaffold;
              view.setFormData(view.model.toJSON());
              scaffold = view.feature.options.scaffold || {};
              if (_.isFunction(scaffold.afterShowDialog)) {
                return scaffold.afterShowDialog.call(view, 'show', view, view.model.toJSON());
              }
            });
          };
        })(this));
      },
      refresh: function() {
        var grid;
        grid = this.feature.views['treetable:body'].components[0];
        return grid.trigger('reloadGrid');
      }
    };
    return {
      type: 'view',
      name: 'treetable',
      fn: function(module, feature, viewName, args) {
        var deferred, initVisibility, scaffold, visibility;
        deferred = $.Deferred();
        if (viewName === 'toolbar') {
          viewLoader.generateOperatorsView({
            handlers: handlers
          }, module, feature, deferred);
        } else if (viewName === 'body') {
          scaffold = feature.options.scaffold || {};
          visibility = scaffold.ensureOperatorsVisibility || viewLoader.ensureOperatorsVisibility;
          initVisibility = scaffold.initOperatorsVisibility || viewLoader.initOperatorsVisibility;
          viewLoader.generateGridView({
            url: 'configuration/tree-table',
            createView: function(options) {
              options.events || (options.events = {});
              options.events['selectionChanged grid'] = 'selectionChanged';
              options.events['draw grid'] = 'refresh';
              options.components[0].checkBoxColumn = false;
              options.components[0].options = {
                afterRequest: function(data) {
                  var d, i, idMap, item, n, visit, _i, _j, _k, _len, _len1, _len2, _ref;
                  idMap = {};
                  for (_i = 0, _len = data.length; _i < _len; _i++) {
                    i = data[_i];
                    idMap[i.id] = i;
                  }
                  for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
                    i = data[_j];
                    if (i.parent) {
                      item = idMap[i.parent.id];
                      item.children || (item.children = []);
                      item.children.push(i);
                    }
                  }
                  idMap = {};
                  d = [];
                  visit = function(node) {
                    var n, _k, _len2, _ref, _results;
                    if (!idMap[node.id]) {
                      d.push(node);
                      idMap[node.id] = true;
                      _ref = node.children || [];
                      _results = [];
                      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                        n = _ref[_k];
                        _results.push(visit(n));
                      }
                      return _results;
                    }
                  };
                  _ref = ((function() {
                    var _l, _len2, _results;
                    _results = [];
                    for (_l = 0, _len2 = data.length; _l < _len2; _l++) {
                      i = data[_l];
                      if (!i.parent) {
                        _results.push(i);
                      }
                    }
                    return _results;
                  })()).concat(data);
                  for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                    n = _ref[_k];
                    visit(n);
                  }
                  return d;
                },
                sDom: 'Ttfr',
                oTreeTable: {
                  fnPreInit: function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    var r;
                    r = $(nRow);
                    if (!aData.parent) {
                      r.addClass('parent');
                    }
                    r.data('tt-id', aData.id);
                    if (aData.parent) {
                      r.data('tt-parent-id', aData.parent.id);
                    }
                    return nRow;
                  },
                  showExpander: true
                }
              };
              return new View(options);
            },
            handlers: {
              selectionChanged: function(id, status) {
                var v;
                if (!status) {
                  return;
                }
                v = this.feature.views['treetable:toolbar'];
                return visibility.call(v, v.options.operators, id);
              },
              refresh: function() {
                var v;
                v = this.feature.views['treetable:toolbar'];
                return initVisibility.call(v, v.options.operators);
              }
            }
          }, module, feature, deferred);
        }
        return deferred;
      }
    };
  });

}).call(this);
