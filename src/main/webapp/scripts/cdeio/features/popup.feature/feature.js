// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'scripts/cdeio/vendors/jquery/jquery.magnific-popup.js'], function($, _) {
    return {
      layout: {
        regions: {
          title: 'popup-title',
          content: 'popup-content',
          buttons: 'popup-buttons'
        }
      },
      views: [
        {
          name: 'inline:popup-title',
          region: 'title',
          avoidLoadingHandlers: true,
          extend: {
            templateHelpers: function() {
              var title;
              title = this.feature.startupOptions.title;
              return {
                title: title
              };
            }
          }
        }, {
          name: 'inline:popup-buttons',
          region: 'buttons',
          avoidLoadingHandlers: true,
          extend: {
            templateHelpers: function() {
              var buttons;
              buttons = this.feature.startupOptions.buttons;
              return {
                buttons: buttons
              };
            }
          }
        }
      ],
      avoidLoadingModel: true,
      extend: {
        initRenderTarget: function(_super) {
          var containerId, popupClass, popupId, template, viewSizeMapping;
          viewSizeMapping = {
            mini: 'span2 offset5',
            small: 'span4 offset4',
            medium: 'span6 offset3',
            large: 'span8 offset2',
            xlarge: 'span10 offset1',
            xxlarge: 'span12'
          };
          popupId = _.uniqueId('popup');
          containerId = this.startupOptions.view.cid;
          popupClass = viewSizeMapping[this.startupOptions.view.options.size || 'medium'];
          this.startupOptions.view.options.popupClass = popupClass;
          template = _.template('<div id="<%= popupId %>" class="row-fluid mfp-hide">\n    <div<% if (popupClass) { %> class="<%= popupClass %>"<% } %>>\n        <div class="position-relative">\n            <div class="widget-box no-border">\n                <div class="widget-body">\n                    <div class="widget-main">\n                        <div class="widget-box no-border">\n                            <div class="widget-body">\n                                <div id="<%= containerId %>" class="widget-main">\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>', {
            popupId: popupId,
            containerId: containerId,
            popupClass: popupClass
          });
          $(template).appendTo(document.body);
          this.popupId = popupId;
          this.popupContainer = $('#' + popupId);
          this.widgetContainer = this.popupContainer.children().eq(0);
          return this.container = $('#' + containerId);
        },
        start: function(_super) {
          var deferred;
          deferred = $.Deferred();
          this.startupOptions.view.popupFeature = this;
          this.activeStartupOptions || (this.activeStartupOptions = []);
          this.activeStartupOptions.push(this.startupOptions);
          this.inRegionViews.content = this.startupOptions.view;
          this.deferredView.done((function(_this) {
            return function() {
              var promise;
              promise = _super.call(_this);
              return promise.done(function() {
                return $.magnificPopup.open({
                  items: {
                    src: _this.popupContainer,
                    type: 'inline'
                  },
                  showCloseBtn: false,
                  closeOnBgClick: false
                });
              });
            };
          })(this));
          return deferred.promise();
        },
        activate: function(_super, options) {
          var currentView, deferred, prevContainer, view;
          deferred = $.Deferred();
          currentView = this.startupOptions.view;
          view = $('#' + options.view.cid);
          if (view.size() === 0) {
            prevContainer = this.container;
            this.container = $("<div id=\"" + options.view.cid + "\" class=\"widget-main\"></div>");
            this.container.appendTo(prevContainer.parent());
            this.initLayout().done((function(_this) {
              return function() {
                if (currentView.options.popupClass) {
                  _this.widgetContainer.removeClass(currentView.options.popupClass);
                }
                if (options.view.options.popupClass) {
                  _this.widgetContainer.addClass(options.view.options.popupClass);
                }
                prevContainer.hide();
                _this.startupOptions = options;
                return _this.start().done(function() {
                  return deferred.relative(_this);
                });
              };
            })(this));
          } else {

          }
          return deferred.promise();
        },
        close: function() {
          var current, options, root;
          options = this.activeStartupOptions.pop();
          if (_.isFunction(options.onClose)) {
            options.onClose(options);
          }
          delete options.view.popupFeature;
          if (this.activeStartupOptions.length > 0) {
            current = this.activeStartupOptions[this.activeStartupOptions.length - 1];
            if (options.view.options.popupClass) {
              this.widgetContainer.removeClass(options.view.options.popupClass);
            }
            if (current.view.options.popupClass) {
              this.widgetContainer.addClass(current.view.options.popupClass);
            }
            this.startupOptions = current;
            $('#' + options.view.cid).hide();
            return $('#' + current.view.cid).show();
          } else {
            root = this.module.getApplication();
            root.stopFeature(this);
            return this.popupContainer.remove();
          }
        }
      }
    };
  });

}).call(this);
