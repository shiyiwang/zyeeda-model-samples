// Generated by CoffeeScript 1.7.1
(function() {
  define(['underscore', 'jquery', 'bootstrap', 'cdeio/features/dialog.feature/views/dialog-title', 'cdeio/features/dialog.feature/views/dialog-buttons', 'text!cdeio/features/dialog.feature/templates.html'], function(_, $) {
    return {
      layout: {
        regions: {
          title: "modal-header",
          body: "modal-body",
          buttons: "modal-footer"
        }
      },
      views: [
        {
          name: 'dialog-title',
          region: 'title'
        }, {
          name: 'dialog-buttons',
          region: 'buttons'
        }
      ],
      avoidLoadingModel: true,
      extend: {
        initRenderTarget: function(su) {
          var c, id, root, viewSize;
          root = this.module.getApplication();
          id = _.uniqueId('dialog');
          viewSize = this.startupOptions.view.options.size || 'medium';
          $('<div class="modal hide c-modal-size-' + viewSize + '" id="' + id + '"><div id="' + this.startupOptions.view.cid + '"></div>').appendTo(document.body);
          this.containerId = id;
          this.dialogContainer = c = $('#' + id);
          c.on('hide', (function(_this) {
            return function(event) {
              if (_this.startedOptions.length > 1) {
                event.preventDefault();
              }
              return _this.close();
            };
          })(this));
          if (this.startupOptions.view.options.dialogClass) {
            c.addClass(this.startupOptions.view.options.dialogClass);
          }
          return this.container = $('#' + this.startupOptions.view.cid);
        },
        stop: function(su) {
          var root;
          root = this.module.getApplication();
          if (this.startupOptions.view.options.dialogClass) {
            this.dialogContainer.removeClass(this.startupOptions.view.options.dialogClass);
          }
          return su.apply(this);
        },
        start: function(su) {
          var deferred, me, startedOptions;
          me = this;
          deferred = $.Deferred();
          startedOptions = me.startedOptions || (me.startedOptions = []);
          startedOptions.push(me.startupOptions);
          me.inRegionViews['body'] = me.startupOptions.view;
          me.startupOptions.view.dialogFeature = this;
          this.deferredView.done(function() {
            var promise;
            promise = su.call(me);
            return promise.done(function() {
              me.modal = $('#' + me.containerId).modal({
                backdrop: 'static'
              });
              return deferred.resolve(me);
            });
          });
          return deferred.promise();
        },
        show: function(su, options) {
          var currentView, deferred, view;
          view = $('#' + options.view.cid);
          currentView = this.startupOptions.view;
          deferred = $.Deferred();
          if (view.size() !== 0) {
            currentView.dialogFeature = this;
            if (currentView.options.dialogClass) {
              this.dialogContainer.removeClass(currentView.options.dialogClass);
            }
            if (options.view.options.dialogClass) {
              this.dialogContainer.addClass(options.view.options.dialogClass);
            }
            this.startedOptions.push(options);
            $('#' + currentView.cid).hide();
            view.show();
            deferred.resolve(this);
            return deferred;
          } else {
            this.dialogContainer.append('<div id=\"' + options.view.cid + '\"></div>');
            this.container = $('#' + options.view.cid);
            this.initLayout().done((function(_this) {
              return function() {
                if (currentView.options.dialogClass) {
                  _this.dialogContainer.removeClass(currentView.options.dialogClass);
                }
                if (options.view.options.dialogClass) {
                  _this.dialogContainer.addClass(options.view.options.dialogClass);
                }
                $('#' + currentView.cid).hide();
                _this.startupOptions = options;
                return _this.start().done(function() {
                  return deferred.resolve(_this);
                });
              };
            })(this));
            return deferred.promise();
          }
        },
        close: function() {
          var app, current, options;
          options = this.startedOptions.pop();
          if (_.isFunction(options.beforeClose)) {
            if ((options.beforeClose.call(options, options)) === false) {
              this.startedOptions = this.startedOptions;
              this.startedOptions.pop = function() {
                return options;
              };
              return false;
            }
          }
          if (_.isFunction(options.onClose)) {
            options.onClose.apply(options);
          }
          delete options.view.dialogFeature;
          if (this.startedOptions.length > 0) {
            current = this.startedOptions[this.startedOptions.length - 1];
            if (options.view.options.dialogClass) {
              this.dialogContainer.removeClass(options.view.options.dialogClass);
            }
            if (current.view.options.dialogClass) {
              this.dialogContainer.addClass(current.view.options.dialogClass);
            }
            this.startupOptions = current;
            $('#' + options.view.cid).hide();
            return $('#' + current.view.cid).show();
          } else {
            app = this.module.getApplication();
            app.stopFeature(this);
            app._modalDialog = null;
            return this.dialogContainer.remove();
          }
        }
      }
    };
  });

}).call(this);
