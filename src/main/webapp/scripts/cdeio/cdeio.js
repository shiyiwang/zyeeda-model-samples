// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'marionette', 'handlebars', 'backbone', 'cdeio/core/component-handler', 'cdeio/core/resource-loader', 'cdeio/core/config', 'cdeio/core/loader-plugin-manager', 'cdeio/core/loaders/default-feature-loader', 'cdeio/core/loaders/default-view-loader', 'cdeio/core/loaders/default-layout-loader', 'cdeio/core/loaders/inline-view-loader', 'cdeio/core/loaders/cdeio-layout-loader', 'cdeio/core/loaders/cdeio-feature-loader', 'cdeio/core/handlebar-helpers', 'cdeio/core/sync', 'bootstrap', 'cdeio/features/dialog.feature/feature', 'cdeio/features/routers'], function($, _, Marionette, Handlebars, Backbone, ComponentHandler, loadResource, config, LoaderPluginManager, featureLoader, viewLoader, layoutLoader, inlineViewloader, cdeioLayoutLoader, cdeioFeatureLoader) {
    var attachDefaultApplicationMethods, cdeio, path, prefix, settingsPromise;
    Marionette.TemplateCache.loadTemplate = function(templateId, callback) {
      return loadResource(templateId, 'text').done(function(template) {
        if (template) {
          return callback.call(this, Handlebars.compile(template));
        } else {
          return callback.call(this, null);
        }
      });
    };
    cdeio = {};
    LoaderPluginManager.register(featureLoader);
    LoaderPluginManager.register(viewLoader);
    LoaderPluginManager.register(layoutLoader);
    LoaderPluginManager.register(inlineViewloader);
    LoaderPluginManager.register(cdeioLayoutLoader);
    LoaderPluginManager.register(cdeioFeatureLoader);
    attachDefaultApplicationMethods = function(app) {
      var fn, name, _i, _len, _ref;
      app.showDialog = function(options) {
        var deferred;
        deferred = $.Deferred();
        if (!app._modalDialog) {
          app.startFeature('cdeio:dialog', options).done(function(feature) {
            app._modalDialog = feature;
            return deferred.resolve(feature);
          });
        } else {
          app._modalDialog.show(options).done(function(feature) {
            return deferred.resolve(feature);
          });
        }
        return deferred.promise();
      };
      if (!app.confirm) {
        app.confirm = function(content, fn) {
          if (confirm(content)) {
            return fn();
          }
        };
      }
      if (!app.prompt) {
        app.prompt = function(content, fn) {
          var s;
          s = prompt(content);
          if (s) {
            return fn(s);
          }
        };
      }
      fn = function(content, title) {
        if (title == null) {
          title = '';
        }
        return alert(title + ': ' + content);
      };
      _ref = ['success', 'info', 'error', 'message'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (!app[name]) {
          app[name] = fn;
        }
      }
      return app;
    };
    cdeio.startBackboneHistory = function(app) {
      if (!Backbone.history) {
        Backbone.history = new Backbone.History();
      }
      return app.initRouters().done(function() {
        return Backbone.history.start();
      });
    };
    cdeio.registerComponentHandler = function(name, init, fn) {
      return ComponentHandler.register(name, init, fn);
    };
    if (config.loadSettings !== false && config.noBackend !== true) {
      path = 'system/settings/all?' + new Date().getTime();
      prefix = config.urlPrefix;
      path = _.isFunction(prefix) ? prefix(void 0, path) : prefix + path;
      settingsPromise = $.get(path, function(data) {
        return config.settings = _.extend({}, data);
      });
    }
    cdeio.startApplication = function(path, options) {
      var app, featureOptions, features;
      if (options == null) {
        options = {};
      }
      if (_.isObject(path)) {
        options = path;
        path = null;
      }
      options = _.extend({}, options, {
        settingsPromise: settingsPromise
      });
      app = !path ? require('cdeio/applications/default')(options) : require(path)(options);
      attachDefaultApplicationMethods(app);
      if (options != null ? options.initFeatures : void 0) {
        features = _.isString(options.initFeatures) ? [options.initFeatures] : options.initFeatures;
        featureOptions = _.isArray(options.initFeatureOptions) ? options.initFeatureOptions : [options.initFeatureOptions];
        app.done(function() {
          var i, name, _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = features.length; _i < _len; i = ++_i) {
            name = features[i];
            _results.push(app.startFeature(name, featureOptions[i]));
          }
          return _results;
        });
      }
      app.done(function() {
        cdeio.startBackboneHistory(app);
        return $(window).on('resize', function() {
          return app.vent.trigger('window#resize');
        });
      });
      return app;
    };
    cdeio.LoaderPluginManager = LoaderPluginManager;
    return cdeio;
  });

}).call(this);
