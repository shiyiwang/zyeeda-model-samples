// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'cdeio/core/view', 'handlebars', 'cdeio/core/form/form-field', 'cdeio/core/form/form-group', 'cdeio/core/loader-plugin-manager', 'cdeio/core/form/text-field', 'cdeio/core/form/date-picker-field', 'cdeio/core/form/date-time-picker-field', 'cdeio/core/form/textarea-field', 'cdeio/core/form/dropdown-field', 'cdeio/core/form/feature-field', 'cdeio/core/form/hidden-field', 'cdeio/core/form/file-picker-field', 'cdeio/core/form/mask-field', 'cdeio/core/form/number-range-field', 'cdeio/core/form/date-range-field', 'cdeio/core/form/inline-grid-field', 'cdeio/vendors/jquery/validation/messages_zh'], function($, _, View, Handlebars, FormField, FormGroup, loaderPluginManager) {

    /*
     * formName: 'add'
     * fieldGroups:
     *     group1: ['field1']
     *     group2: ['field2']
     * form:
     *     tabs: [
     *         {title: 'tab1', groups: ['group1', 'group2']}
     *     ]
     *     groups: ['group1', 'group2']
     */
    var ProcessFormView;
    ProcessFormView = (function(_super) {
      __extends(ProcessFormView, _super);

      function ProcessFormView(options) {
        var opt;
        console.log('process-form-view--constructor options', options);
        opt = _.extend({}, options);
        this.initForm(opt.form, opt.fieldGroups, opt);
        _.extend(opt, {
          avoidLoadingModel: true
        });
        ProcessFormView.__super__.constructor.call(this, opt);
      }

      ProcessFormView.prototype.initForm = function(form, fieldGroups, options) {
        var components, events, group, groups, tab, unusedGroups, url, _i, _j, _k, _len, _len1, _len2, _ref;
        url = options.feature.url();
        fieldGroups['history-group'] = [
          {
            type: 'inline-grid',
            "allowPick": false,
            "pickerType": "grid-picker",
            "disableShow": true,
            allowEdit: false,
            allowAdd: false,
            needDeferLoading: false,
            readOnly: true,
            loadViewFormDeferred: true,
            "source": url,
            grid: {
              columns: [
                {
                  name: 'name',
                  header: '任务名称',
                  width: 160
                }, {
                  name: 'assigneeName',
                  header: '执行人',
                  width: 80
                }, {
                  name: 'startTime',
                  header: '开始时间',
                  width: 160
                }, {
                  name: 'claimTime',
                  header: '认领时间',
                  width: 160
                }, {
                  name: 'endTime',
                  header: '完成时间',
                  width: 160
                }, {
                  name: 'comment',
                  header: '意见',
                  width: 160
                }
              ]
            }
          }
        ];
        groups = form.groups;
        groups = _.isArray(groups) ? groups : [groups];
        this.groups = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = groups.length; _i < _len; _i++) {
            group = groups[_i];
            _results.push(this.createGroup(group, fieldGroups));
          }
          return _results;
        }).call(this);
        events = {};
        components = [];
        if (form.tabs) {
          unusedGroups = this.groups.slice(0);
          _ref = form.tabs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tab = _ref[_i];
            groups = tab.groups;
            groups = _.isArray(groups) ? groups : [groups];
            tab.id = _.uniqueId('tab');
            events['shown a-' + tab.id] = 'form-change-tab';
            for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
              group = groups[_j];
              unusedGroups = _.without(unusedGroups, this.findGroup(group));
              this.eachField(group, function(field) {
                var c, cs, es, _k, _len2, _ref1;
                if ((es = field.getEvents())) {
                  _.extend(events, es);
                }
                cs = field.getComponents();
                _ref1 = cs || [];
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  c = _ref1[_k];
                  c.delay = tab.id;
                }
                if (cs) {
                  return components = components.concat(cs);
                }
              });
            }
          }
          for (_k = 0, _len2 = unusedGroups.length; _k < _len2; _k++) {
            group = unusedGroups[_k];
            this.needExtraComponentRender = true;
            this.eachField(group.options.name, function(field) {
              var cs, es;
              if ((es = field.getEvents())) {
                _.extend(events, es);
              }
              if ((cs = field.getComponents())) {
                return components = components.concat(cs);
              }
            });
          }
          this.defaultComponentDelay = form.tabs[0].id;
          (this.eventHandlers || (this.eventHandlers = {}))['form-change-tab'] = (function(_this) {
            return function(e) {
              var id;
              id = $(e.target).attr('id');
              console.log('process-form-view --- initForm id = ', id);
              id = id.match(/a\-(\w+)/)[1];
              console.log('process-form-view --- initForm after match id = ', id);
              return _this.renderComponents(id);
            };
          })(this);
        } else {
          this.eachField(function(field) {
            var cs, es;
            if ((es = field.getEvents())) {
              _.extend(events, es);
            }
            if ((cs = field.getComponents())) {
              return components = components.concat(cs);
            }
          });
        }
        options.events = _.extend(options.events || {}, events);
        return options.components = (options.components || []).concat(components);
      };

      ProcessFormView.prototype.createGroup = function(group, fieldGroups) {
        var g;
        g = _.isString(group) ? {
          name: group
        } : group;
        return new FormGroup(this, g, fieldGroups[g.name]);
      };

      ProcessFormView.prototype.eachField = function(group, fn) {
        var field, fields, _i, _j, _len, _len1, _ref, _results, _results1;
        if (_.isFunction(group)) {
          fn = group;
          group = null;
        }
        if (!_.isFunction(fn)) {
          return;
        }
        if (group) {
          group = this.findGroup(group);
          fields = group.fields.concat(group.hiddenFields);
          _results = [];
          for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            _results.push(fn(field));
          }
          return _results;
        } else {
          _ref = this.groups;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            group = _ref[_j];
            fields = group.fields.concat(group.hiddenFields);
            _results1.push((function() {
              var _k, _len2, _results2;
              _results2 = [];
              for (_k = 0, _len2 = fields.length; _k < _len2; _k++) {
                field = fields[_k];
                _results2.push(fn(field));
              }
              return _results2;
            })());
          }
          return _results1;
        }
      };

      ProcessFormView.prototype.findGroup = function(name) {
        var g, group, _i, _len, _ref;
        _ref = this.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          if (group.options.name === name) {
            g = group;
          }
        }
        return g;
      };

      ProcessFormView.prototype.findField = function(name, group) {
        var fields;
        fields = [];
        this.eachField(group, function(field) {
          if (field.name === name) {
            return fields.push(field);
          }
        });
        return fields;
      };

      ProcessFormView.prototype.isValid = function() {
        return this.$$('form').valid();
      };

      ProcessFormView.prototype.getFormData = function() {
        var data;
        data = {};
        this.eachField((function(_this) {
          return function(field) {
            if (!field.submitThisField()) {
              return;
            }
            if (field.getFormData() === null) {
              return;
            }
            if (data[field.name] !== void 0) {
              if (!_.isArray(data[field.name])) {
                data[field.name] = [data[field.name]];
              }
              return data[field.name].push(field.getFormData());
            } else {
              return data[field.name] = field.getFormData();
            }
          };
        })(this));
        this.model.clear();
        this.model.set(data);
        return this.model.toJSON();
      };

      ProcessFormView.prototype.getFilters = function() {
        var filters;
        filters = [];
        this.eachField((function(_this) {
          return function(field) {
            var filter;
            filter = field.getFilter();
            if (filter) {
              return filters.push(filter);
            }
          };
        })(this));
        return filters;
      };

      ProcessFormView.prototype.setFormData = function(data, onlyExists) {
        if (data == null) {
          data = {};
        }
        return this.eachField(function(field) {
          if (onlyExists === true) {
            if (_.has(data, field.name)) {
              return field.loadFormData(data[field.name], data);
            }
          } else {
            return field.loadFormData(data[field.name], data);
          }
        });
      };

      ProcessFormView.prototype.reset = function() {
        return this.setFormData({});
      };

      ProcessFormView.prototype.fetchData = function(id) {
        this.model.clear();
        this.model.set('id', id);
        return this.model.fetch().done((function(_this) {
          return function() {
            return _this.setFormData(_this.model.toJSON());
          };
        })(this));
      };

      ProcessFormView.prototype.submit = function(options) {
        var deferred;
        deferred = $.Deferred();
        if (!this.isValid()) {
          deferred.reject();
        } else {
          this.getFormData();
          if (this.feature.extraFormData) {
            this.model.set(this.feature.extraFormData);
          }
          this.model.set(options);
          this.model.save().done(function(data) {
            return deferred.resolve(data);
          });
        }
        return deferred.promise();
      };

      ProcessFormView.prototype.getMaxColumns = function() {
        var group, i, _i, _len, _ref;
        i = 1;
        _ref = this.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          if (i < group.getColumns()) {
            i = group.getColumns();
          }
        }
        return i;
      };

      ProcessFormView.prototype.afterRender = function() {
        var deferred, promises;
        deferred = $.Deferred();
        promises = [];
        if (this.needExtraComponentRender === true) {
          promises.push(this.renderComponents());
        }
        this.eachField(function(field) {
          promises.push(field.afterRender());
          if (field.disabled) {
            if (' grid-picker tree-picker file-picker'.indexOf(field.type) > 0) {
              return $('#trigger-a-' + field.id, field.form.$el).unbind().css('cursor', 'not-allowed');
            } else {
              return field.form.$(field.id).attr('disabled', true);
            }
          }
        });
        $.when.apply($, promises).then((function(_this) {
          return function() {
            return $.when(_this.bindValidation()).then(function() {
              return deferred.resolve(this);
            });
          };
        })(this));
        return deferred.promise();
      };

      ProcessFormView.prototype.bindValidation = function() {
        var validator;
        if (!this.options.validation) {
          return;
        }
        return validator = this.$$('form').validate({
          rules: this.options.validation.rules,
          ignore: this.options.validation.ignore || '',
          onfocusout: function(el) {
            return validator.element(el);
          },
          errorPlacement: function(error, element) {
            var $el, elPos;
            $el = $(element);
            elPos = $el.position();
            $(error).css({
              color: '#CC0000',
              position: 'absolute',
              top: elPos.top + $el.outerHeight()
            });
            return $(error).insertAfter(element);
          },
          highlight: function(label) {
            return $(label).closest('.control-group').addClass('error');
          },
          success: function(label) {
            $(label).closest('.control-group').removeClass('error');
            return $(label).remove();
          }
        });
      };

      ProcessFormView.prototype.getTemplate = function() {
        var contents, group, groups, i, id, lis, o, oo, style, tab, tabContent, unused, _i, _len, _ref, _ref1;
        if (this.options.labelOnTop === false) {
          style = 'form-horizontal';
        }
        if (this.options.formName != null) {
          style += ' c-action-form c-action-form-' + this.options.formName;
        }
        o = {
          formClass: style,
          formName: this.options.formName
        };
        if (this.options.form.tabs) {
          unused = this.groups.slice(0);
          lis = [];
          contents = [];
          _ref = this.options.form.tabs;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            tab = _ref[i];
            id = tab.id;
            lis.push(this.getTabLiTemplate()({
              i: i,
              title: tab.title,
              id: id
            }));
            groups = tab.groups;
            groups = _.isArray(groups) ? groups : [groups];
            if ((_ref1 = tab.title) === '基本信息' || _ref1 === '历史信息') {
              tabContent = this.getTabContentTemplate()({
                content: ((function() {
                  var _j, _len1, _results;
                  _results = [];
                  for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
                    group = groups[_j];
                    group = this.findGroup(group);
                    unused = _.without(unused, group);
                    if (_.isEmpty(this.model.get('_t_taskId')) && group.options.name === 'task-info-group') {
                      _results.push('');
                    } else {
                      _results.push(group.getTemplate());
                    }
                  }
                  return _results;
                }).call(this)).join(''),
                id: id,
                i: i
              });
            } else {
              tabContent = this.getProcessTabContentTemplate()({
                content: ((function() {
                  var _j, _len1, _results;
                  _results = [];
                  for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
                    group = groups[_j];
                    group = this.findGroup(group);
                    unused = _.without(unused, group);
                    _results.push(group.getTemplate());
                  }
                  return _results;
                }).call(this)).join(''),
                id: id,
                i: i,
                processInstanceId: this.model.get('processInstanceId')
              });
            }
            contents.push(tabContent);
          }
          unused = [];
          oo = {
            pinedGroups: ((function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = unused.length; _j < _len1; _j++) {
                group = unused[_j];
                _results.push(group.getTemplate());
              }
              return _results;
            })()).join(''),
            lis: lis.join(''),
            content: contents.join('')
          };
          o.content = this.getTabLayoutTemplate()(oo);
        } else {
          o.content = ((function() {
            var _j, _len1, _ref2, _results;
            _ref2 = this.groups;
            _results = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              group = _ref2[_j];
              _results.push(group.getTemplate());
            }
            return _results;
          }).call(this)).join('');
        }
        o.hiddens = ((function() {
          var _j, _len1, _ref2, _results;
          _ref2 = this.groups;
          _results = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            group = _ref2[_j];
            _results.push(group.getHiddenFieldsTemplate());
          }
          return _results;
        }).call(this)).join('');
        return _.template(this.getTemplateString())(o);
      };

      ProcessFormView.prototype.renderHtml = function(data) {
        return Handlebars.compile(this.getTemplate())(data);
      };

      ProcessFormView.prototype.getTemplateString = function() {
        return '<form class="<%= formClass %>">\n    <%= content %>\n    <%= hiddens %>\n    <input type="hidden" name="__FORM_NAME__" value="<%= formName %>"/>\n</form>';
      };

      ProcessFormView.prototype.getTabLayoutTemplate = function() {
        return _.template('<%= pinedGroups %>\n<div>\n    <ul class="nav nav-tabs">\n        <%= lis %>\n    </ul>\n    <div class="tab-content">\n        <%= content %>\n    </div>\n</div>');
      };

      ProcessFormView.prototype.getTabLiTemplate = function() {
        return _.template('<li <% if (i == 0) {%>class="active" <%}%>><a data-target="<%= id %>" id="a-<%= id %>" data-toggle="tab"><%= title %></a></li>');
      };

      ProcessFormView.prototype.getTabContentTemplate = function() {
        return _.template('<div class="tab-pane <%if (i == 0) {%>active<%}%>" id="<%= id %>">\n    <%= content %>\n</div>');
      };

      ProcessFormView.prototype.getProcessTabContentTemplate = function() {
        return _.template('<div class="tab-pane <%if (i == 0) {%>active<%}%>" id="<%= id %>">\n    <%= content %>\n    <br/><br/>\n    <div>\n        <img src="invoke/scaffold/bpm/diagram/processInstanceId/<%= processInstanceId %>" />\n    </div>\n</div>');
      };

      ProcessFormView.prototype.getHistoryTabContentTemplate = function() {
        return _.template('<div class="tab-pane" id="<%= id %>">\n    <%= content %>\n</div>');
      };

      return ProcessFormView;

    })(View);
    ProcessFormView.FormGroup = FormGroup;
    View.add('process-form-view', ProcessFormView);
    return ProcessFormView;
  });

}).call(this);
