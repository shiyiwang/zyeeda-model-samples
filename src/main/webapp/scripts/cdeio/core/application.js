// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['jquery', 'underscore', 'backbone', 'marionette', 'handlebars', 'cdeio/core/config', 'cdeio/core/util', 'cdeio/core/resource-loader', 'cdeio/core/loader-plugin-manager'], function($, _, Backbone, Marionette, Handlebars, config, util, loadResource, loaderPluginManager) {
    var Application, error, log;
    log = util.log, error = util.error;
    return Application = (function(_super) {
      __extends(Application, _super);

      function Application(options) {
        this.options = options;
        this.baseName = config.applicationName;
        this.paths = [config.applicationName];
        this.parent = null;
        this.features = {};
        Application.__super__.constructor.apply(this, arguments);
        this.promises = [];
      }

      Application.prototype.getPromises = function() {
        return this.getApplication().promises;
      };

      Application.prototype.addPromise = function(promise) {
        var idx, promises;
        promises = this.getPromises();
        idx = promises.length;
        promises.push(promise);
        return idx;
      };

      Application.prototype.done = function(fn) {
        return $.when.apply($, this.getPromises()).done(fn);
      };

      Application.prototype.initRouters = function() {
        var deferred;
        deferred = $.Deferred();
        this.addPromise(deferred);
        this.loadResource(config.routerFileName).done((function(_this) {
          return function(def) {
            var Router, mounts, name, nrs, ps, routes, value;
            if (!def) {
              deferred.resolve(null);
              return;
            }
            def = _.extend({}, def);
            nrs = {};
            mounts = def.mounts || [];
            ps = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = mounts.length; _i < _len; _i++) {
                name = mounts[_i];
                _results.push(this.module(name).initRouters());
              }
              return _results;
            }).call(_this);
            routes = def.routes;
            for (name in routes) {
              value = routes[name];
              nrs[_this.path(name, true)] = value;
            }
            def.routes = nrs;
            def.module = _this;
            Router = Backbone.Router.extend(def);
            _this.router = new Router();
            return $.when.apply($, ps).done(function() {
              return deferred.resolve();
            });
          };
        })(this));
        return deferred.promise();
      };

      Application.prototype.path = function(append, withoutRoot) {
        var paths;
        paths = withoutRoot === true ? this.paths.slice(1) : this.paths;
        append = _.isArray(append) ? append : [append];
        paths = paths.concat(append);
        return paths.join('/');
      };

      Application.prototype.url = function(append) {
        var path, prefix;
        path = this.path(null, true);
        if (append) {
          path += '/' + append;
        }
        prefix = config.urlPrefix;
        path = _.isFunction(prefix) ? prefix(this, path) : prefix + '/' + path;
        return path.replace(/\/{2,}/g, '/');
      };

      Application.prototype.module = function(names) {
        var module, name, parent, ps, _i, _len;
        names = _.isArray(names) ? names : names.split('/');
        parent = this;
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          ps = [].concat(parent.paths);
          ps.push(name);
          module = parent[name] || (parent[name] = new Application({
            baseName: name,
            parent: parent,
            paths: ps
          }));
          parent = module;
        }
        return parent;
      };

      Application.prototype.getApplication = function() {
        var root;
        if (!this.root) {
          root = this;
          while (root.parent !== null) {
            root = root.parent;
          }
          this.root = root;
        }
        return this.root;
      };

      Application.prototype.findModule = function(names) {
        var module, name, _i, _len;
        names = _.isArray(names) ? names : names.split('/');
        module = this;
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          module = module != null ? module[name] : void 0;
        }
        return module;
      };

      Application.prototype.findFeature = function(name) {
        var cid, feature, index, _ref;
        index = name.indexOf(':');
        if (index > 0) {
          name = name.substring(index + 1, name.length);
        }
        _ref = this.features;
        for (cid in _ref) {
          feature = _ref[cid];
          if (feature.baseName === name) {
            return feature;
          }
        }
      };

      Application.prototype.resolveResoucePath = function(resourcePath) {
        if (resourcePath.charAt(0) === '/') {
          return this.getApplication().path(resourcePath.substring(1));
        }
        return this.path(resourcePath);
      };

      Application.prototype.loadResource = function(resourcePath, plugin, useOrginalPath) {
        var path;
        if (useOrginalPath === true) {
          return loadResource(resourcePath, plugin);
        }
        if (resourcePath.charAt(0) === '/') {
          return this.getApplication().loadResource(resourcePath.substring(1));
        }
        path = this.resolveResoucePath(resourcePath);
        return loadResource(path, plugin);
      };

      Application.prototype.loadFeature = function(featurePath, options) {
        var deferred, featureName, module, names, _i, _ref;
        if (options == null) {
          options = {};
        }
        _ref = featurePath.split('/'), names = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), featureName = _ref[_i++];
        module = this.findModule(names) || this.module(names);
        deferred = $.Deferred();
        $.when(loaderPluginManager.invoke('feature', module, null, featureName, options)).then(function(feature) {
          if (feature === null) {
            error(module, "Feature not found at path: " + featurePath + ".");
          }
          return feature.deferredView.done(function() {
            return deferred.resolve(feature);
          });
        });
        return deferred.promise();
      };

      Application.prototype.startFeature = function(featurePath, options) {
        var deferred, f, featureName, i, ignoreExists, key, module, names, _i, _ref;
        deferred = $.Deferred();
        _ref = featurePath.split('/'), names = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), featureName = _ref[_i++];
        if (config.disableAuthz !== true && featurePath.indexOf('cdeio:') !== 0 && _.indexOf(config.whitelist, featurePath) === -1) {
          i = featureName.indexOf(':');
          key = i !== -1 ? featureName.substring(i + 1) : featureName;
          key = names.concat([key]).join('/');
          key = key + ':show';
          if (!(this.settings && this.settings.session && this.settings.session.permissions && this.settings.session.permissions[key])) {
            app.error('没有操作权限');
            console.log(key);
            return deferred.reject();
          }
        }
        module = this.findModule(names) || this.module(names);
        f = module.findFeature(featureName);
        ignoreExists = (f != null ? f.ignoreExists : void 0) || (options != null ? options.ignoreExists : void 0);
        if (f && ignoreExists !== true) {
          return f.activate(options);
        }
        deferred = $.Deferred();
        this.addPromise(deferred);
        this.loadFeature(featurePath, options).done((function(_this) {
          return function(feature) {
            return feature.start().done(function() {
              return deferred.resolve(feature);
            }).fail(function() {
              return deferred.reject(feature);
            });
          };
        })(this));
        return deferred.promise();
      };

      Application.prototype.stopFeature = function(feature) {
        return feature.stop();
      };

      return Application;

    })(Marionette.Application);
  });

}).call(this);
