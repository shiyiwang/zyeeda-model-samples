// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'handlebars', 'marionette', 'cdeio/core/config', 'cdeio/core/view', 'cdeio/core/form-view', 'cdeio/core/form/form-group', 'cdeio/core/form/form-field'], function($, _, H, M, config, View, FormView, FormGroup, FormField) {
    var CustomFormView;
    CustomFormView = (function(_super) {
      __extends(CustomFormView, _super);

      function CustomFormView(options) {
        var opt;
        opt = _.extend({}, options);
        CustomFormView.__super__.constructor.call(this, opt);
        this.promises.push(this.initTpl(options));
      }

      CustomFormView.prototype.initTpl = function(options) {
        var deferred, path;
        deferred = $.Deferred();
        path = this.options.template ? this.module.resolveResoucePath('/' + this.options.template) : this.module.resolveResoucePath(this.feature.baseName + '.feature/views/' + this.baseName + config.templateSuffix);
        M.TemplateCache.get(path).done((function(_this) {
          return function(tpl) {
            _this.tpl = tpl;
            deferred.resolve();
            return deferred.promise();
          };
        })(this));
        return deferred.promise();
      };

      CustomFormView.prototype.initForm = function(form, fieldGroups, options) {
        var components, events, group, groups;
        groups = form.groups;
        groups = _.isArray(groups) ? groups : [groups];
        this.groups = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = groups.length; _i < _len; _i++) {
            group = groups[_i];
            _results.push(this.createGroup(group, fieldGroups));
          }
          return _results;
        }).call(this);
        events = {};
        components = [];
        this.eachField(function(field) {
          var cs, es;
          if ((es = field.getEvents())) {
            _.extend(events, es);
          }
          if ((cs = field.getComponents())) {
            return components = components.concat(cs);
          }
        });
        options.events = _.extend(options.events || {}, events);
        return options.components = (options.components || []).concat(components);
      };

      CustomFormView.prototype.getTemplate = function() {
        var content, group, o, style, template;
        if (this.options.labelOnTop === false) {
          style = 'form-horizontal';
        }
        if (this.options.formName != null) {
          style += ' c-action-form c-action-form-' + this.options.formName;
        }
        o = {
          formClass: style,
          formName: this.options.formName
        };
        content = {};
        this.eachField(function(field) {
          content[field.name] = field.getTemplate();
          return content[field.name + 'Id'] = field.id;
        });
        o.content = this.tpl(content);
        o.hiddens = ((function() {
          var _i, _len, _ref, _results;
          _ref = this.groups;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            group = _ref[_i];
            _results.push(group.getHiddenFieldsTemplate());
          }
          return _results;
        }).call(this)).join('');
        return template = _.template(this.getTemplateString())(o);
      };

      return CustomFormView;

    })(FormView);
    View.add('custom-form-view', CustomFormView);
    return CustomFormView;
  });

}).call(this);
