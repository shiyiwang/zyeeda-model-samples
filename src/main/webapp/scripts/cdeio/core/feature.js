// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  define(['jquery', 'underscore', 'marionette', 'cdeio/core/config', 'cdeio/core/util', 'cdeio/core/model', 'cdeio/core/collection', 'cdeio/core/layout', 'cdeio/core/loader-plugin-manager'], function($, _, M, config, util, Model, Collection, Layout, loaderPluginManager) {
    var Feature, error, getPath, log;
    getPath = config.getPath;
    log = util.log, error = util.error;
    Feature = (function() {
      function Feature(options, startupOptions) {
        var key, old, value, _ref;
        this.options = options;
        this.startupOptions = startupOptions != null ? startupOptions : {};
        options.avoidLoadingModel = options.avoidLoadingModel === false ? false : true;
        this.cid = _.uniqueId('feature');
        this.baseName = options.baseName;
        this.module = options.module;
        if (options.model) {
          this.model = options.model;
        }
        if (options.collection) {
          this.collection = options.collection;
        }
        this.module.features[this.cid] = this;
        if (this.options.activeTab) {
          this.activeTab = this.options.activeTab;
        }
        if (this.options.extend) {
          _ref = this.options.extend;
          for (key in _ref) {
            value = _ref[key];
            old = this[key];
            if (_.isFunction(value)) {
              value = _.bind(value, this, old);
            }
            this[key] = value;
          }
        }
        this.initRenderTarget();
        this.deferredTemplate = this.initTemplate();
        this.deferredLayout = this.initLayout();
        this.deferredModel = this.initModel();
        this.deferredCollection = this.initCollection();
        this.deferredView = this.initViews();
      }

      Feature.prototype.initRenderTarget = function() {
        var target;
        target = this.container || this.options.container || this.startupOptions.container || config.featureContainer;
        if (_.isFunction(target)) {
          target = target(this);
        }
        return this.container = target;
      };

      Feature.prototype.initTemplate = function() {
        if (this.options.avoidLoadingTemplate === true) {
          return null;
        }
        return M.TemplateCache.get(this.module.resolveResoucePath(this.baseName + '.feature/templates' + config.templateSuffix)).done((function(_this) {
          return function(template) {
            return _this.template = template;
          };
        })(this));
      };

      Feature.prototype.initLayout = function() {
        var layout;
        layout = this.options.layout;
        if (!layout) {
          layout = this.baseName;
        }
        return loaderPluginManager.invoke('layout', this.module, this, layout).done((function(_this) {
          return function(layout) {
            return _this.layout = layout;
          };
        })(this));
      };

      Feature.prototype.initModel = function() {
        var deferred;
        if (this.model) {
          return;
        }
        deferred = $.Deferred();
        if (this.options.avoidLoadingModel === true) {
          this.ModelDefinition = Model.extend({
            feature: this
          });
          this.model = new this.ModelDefinition();
          deferred.resolve();
          return deferred.promise();
        }
        this.module.loadResource(getPath(this, 'model', this.baseName)).done((function(_this) {
          return function(def) {
            if (!def) {
              _this.ModelDefinition = Model.extend({
                feature: _this
              });
              _this.model = new _this.ModelDefinition();
              return deferred.resolve();
            } else {
              def.feature = _this;
              _this.ModelDefinition = Model.extend(def);
              _this.model = new _this.ModelDefinition();
              return deferred.resolve();
            }
          };
        })(this));
        return deferred.promise();
      };

      Feature.prototype.initCollection = function() {
        if (this.collection) {
          return;
        }
        return this.deferredModel.done((function(_this) {
          return function() {
            return _this.collection = new (Collection.extend({
              feature: _this
            }))(null, {
              model: _this.ModelDefinition
            });
          };
        })(this));
      };


      /*
      appendViews 为附加的 view 列表，在构造方法默认初始化 feature 时此参数为空
      appendViews 此参数用于同一个 feature 中的多个 view 需要按顺序或单独加载时使用
       */

      Feature.prototype.initViews = function(appendViews) {
        var deferred, promises, view, viewToInit, views, _i, _len, _ref;
        if (appendViews == null) {
          appendViews = [];
        }
        this.inRegionViews = this.inRegionViews || {};
        this.views = this.views || {};
        viewToInit = _.isEmpty(appendViews) ? this.options.views : appendViews;
        views = [];
        promises = [this.deferredTemplate, this.deferredLayout, this.deferredModel];
        _ref = viewToInit || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          view = _.isString(view) ? {
            name: view
          } : view;
          views.push(view);
          promises.push(loaderPluginManager.invoke('view', this.module, this, view));
        }
        deferred = $.when.apply($, promises).then(_.bind((function(_this) {
          return function() {
            var args, i, u1, u2, u3, v, vs, _j, _len1;
            vs = arguments[0], u1 = arguments[1], u2 = arguments[2], u3 = arguments[3], args = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
            for (i = _j = 0, _len1 = args.length; _j < _len1; i = ++_j) {
              v = args[i];
              _this.views[vs[i].name] = v;
              if (vs[i].region) {
                _this.inRegionViews[vs[i].region] = _this.views[vs[i].name];
              }
            }
          };
        })(this), this, views));
        return deferred.promise();
      };

      Feature.prototype.showView = function(region, view) {
        var deferred, promise, _ref;
        deferred = $.Deferred();
        if (!view) {
          view = this.inRegionViews[region];
        }
        view = this.views[view];
        if (!view) {
          return;
        }
        promise = this.deferredStart ? this.deferredStart.promise() : this.start();
        if (((_ref = this.layout[region].currentView) != null ? _ref.cid : void 0) === view.cid) {
          deferred.resolve();
        } else {
          view.on('show', _.once(function() {
            return deferred.resolve();
          }));
          promise.done((function(_this) {
            return function() {
              return _this.layout[region].show(view);
            };
          })(this));
        }
        return deferred.promise();
      };

      Feature.prototype.url = function() {
        return this.module.url(this.baseName);
      };

      Feature.prototype.path = function() {
        return this.module.path(this.baseName, true);
      };

      Feature.prototype.request = function(options) {
        options.url = this.url() + '/' + options.url;
        return $.ajax(options);
      };

      Feature.prototype.activate = function(options) {
        this.startupOptions = options;
        return this.start();
      };

      Feature.prototype.onStop = function() {};

      Feature.prototype.stop = function() {
        var result, _dispose, _resolve;
        this.deferredStop = $.Deferred();
        result = this.onStop();
        _dispose = (function(_this) {
          return function() {
            var $c, _ref;
            $c = $(_this.container);
            $c.hide();
            if ((_ref = _this.avoidLoadingTemplate) != null) {
              _ref.done(function() {
                return _this.template = null;
              });
            }
            _this.deferredLayout.done(function() {
              return _this.layout.dispose();
            });
            _this.deferredModel.done(function() {
              return _this.model = null;
            });
            _this.deferredCollection.done(function() {
              return _this.collection = null;
            });
            _this.deferredView.done(function() {
              var k, v, _ref1, _results;
              _ref1 = _this.views;
              _results = [];
              for (k in _ref1) {
                v = _ref1[k];
                _results.push(v.dispose());
              }
              return _results;
            });
            $c.empty();
            return $c.show();
          };
        })(this);
        _resolve = (function(_this) {
          return function(r) {
            if (r !== false) {
              _dispose();
              delete _this.module.features[_this.cid];
              return _this.deferredStop.resolve(_this);
            } else {
              return _this.deferredStop.reject(_this);
            }
          };
        })(this);
        if (result && _.isFunction(result.done)) {
          result.done(function(arg) {
            return _resolve(arg);
          });
        } else {
          _resolve(result);
        }
        return this.deferredStop.promise();
      };

      Feature.prototype.onStart = function() {};

      Feature.prototype.start = function() {
        var c, callOnStart, fn, old;
        this.deferredStart = $.Deferred();
        callOnStart = (function(_this) {
          return function() {
            var result;
            result = _this.onStart();
            if (result && _.isFunction(result.done)) {
              return result.done(function() {
                return _this.deferredStart.resolve(_this);
              });
            } else {
              if (result === false) {
                return _this.deferredStart.reject(_this);
              } else {
                return _this.deferredStart.resolve(_this);
              }
            }
          };
        })(this);
        fn = (function(_this) {
          return function() {
            var rendered, views;
            views = [];
            rendered = {};
            return _this.deferredView.done(function() {
              return _this.layout.render(function() {
                var region, view, _ref, _ref1, _results;
                _ref = _this.inRegionViews;
                for (region in _ref) {
                  view = _ref[region];
                  views.push(region);
                }
                if (views.length === 0) {
                  callOnStart();
                  return;
                }
                _ref1 = _this.inRegionViews;
                _results = [];
                for (region in _ref1) {
                  view = _ref1[region];
                  view.on('show', _.once(_.bind(function(rr, vs, rd) {
                    rd[rr] = true;
                    if (_.all(vs, function(r) {
                      return !!rd[r];
                    })) {
                      return callOnStart();
                    }
                  }, _this, region, views, rendered)));
                  _results.push(_this.layout[region].show(view));
                }
                return _results;
              });
            });
          };
        })(this);
        c = $(this.container);
        old = c.data('feature');
        if (old && old.cid !== this.cid) {
          old.stop().done((function(_this) {
            return function() {
              c.data('feature', _this);
              return fn();
            };
          })(this)).fail((function(_this) {
            return function() {
              return _this.deferredStart.reject(_this);
            };
          })(this));
        } else {
          c.data('feature', this);
          fn();
        }
        return this.deferredStart.promise();
      };

      Feature.prototype.genEventName = function(eventName) {
        return this.path() + '#' + eventName;
      };

      Feature.prototype.isFeatureEvent = function(eventName) {
        return eventName.indexOf('#') !== -1;
      };

      Feature.prototype.on = function(view, eventName, callback, context) {
        var name;
        if (eventName.indexOf('#') === -1) {
          name = this.genEventName(eventName);
        } else {
          name = eventName.indexOf('this#') !== -1 ? this.genEventName(eventName.split('#')[1]) : eventName;
        }
        return view.bindTo(this.module.getApplication().vent, name, callback, context);
      };

      Feature.prototype.trigger = function() {
        var args, event, eventName, _ref;
        eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        event = this.genEventName(eventName);
        return (_ref = this.module.getApplication().vent).trigger.apply(_ref, [event, this].concat(args));
      };

      Feature.prototype.delegateDomEvent = function(view, eventName, exists) {
        return function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (_.isFunction(exists)) {
            exists();
          }
          return (_ref = view.feature).trigger.apply(_ref, [eventName, view].concat(args));
        };
      };

      Feature.prototype.delegateComponentEvent = function(view, obj, eventName, exists) {
        return function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          (_ref = view.feature).trigger.apply(_ref, [eventName, view, obj.component].concat(args));
          if (_.isString(exists)) {
            return view.bindEventHandler(exists).apply(view, args);
          }
        };
      };

      Feature.prototype.isPermitted = function(operator) {
        var app, _ref, _ref1, _ref2;
        if (config.disableAuthz === true) {
          return true;
        }
        app = this.module.getApplication();
        return !!((_ref = app.settings) != null ? (_ref1 = _ref.session) != null ? (_ref2 = _ref1.permissions) != null ? _ref2[this.path() + ':' + operator] : void 0 : void 0 : void 0);
      };

      return Feature;

    })();
    return Feature;
  });

}).call(this);
