// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'cdeio/core/form/form-field', 'cdeio/components/select'], function($, FormField) {
    var DropDownField;
    DropDownField = (function(_super) {
      __extends(DropDownField, _super);

      function DropDownField() {
        DropDownField.__super__.constructor.apply(this, arguments);
        this.filterOperator = 'eq';
        this.type = 'dropdown';
      }

      DropDownField.prototype.getComponents = function() {
        var config, me, textKey;
        config = {
          selector: this.id,
          type: 'select',
          fieldName: this.name,
          name: this.name,
          readOnly: this.readOnly,
          multiple: this.multiple,
          change: this.options.change
        };
        if (this.options.url) {
          textKey = this.options.textKey || 'name';
          me = this;
          $.ajax(me.options.url, {
            dataType: 'json'
          }).done(function(data) {
            config.query = function(q) {
              var d, result, t, text, _i, _len, _ref;
              t = q.term;
              result = [];
              _ref = data.results;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                d = _ref[_i];
                text = d.text ? d.text : d[textKey];
                if (text.indexOf(t) >= 0) {
                  result.push({
                    id: d.id,
                    text: text
                  });
                }
              }
              return q.callback({
                results: result
              });
            };
            return config.initSelection = function(e, fn) {
              var results, val;
              val = $(e).val();
              results = data.results;
              return _(results).each(function(item) {
                if (String(item.id) === String(val)) {
                  return fn(item);
                }
              });
            };
          });
        } else {
          config.data = this.options.source;
          config.initSelection = (function(_this) {
            return function(el, fn) {
              var pickerSource, val;
              val = $(el).val();
              pickerSource = _this.options.source;
              if (!val) {
                return fn(pickerSource[0]);
              }
              return _(pickerSource).each(function(item) {
                if (String(item.id) === String(val)) {
                  return fn(item);
                }
              });
            };
          })(this);
        }
        return [config];
      };

      DropDownField.prototype.afterRender = function() {
        var select;
        if (this.options.defaultValue) {
          select = this.form.findComponent(this.id);
          return typeof select.select2 === "function" ? select.select2('val', this.options.defaultValue) : void 0;
        }
      };

      DropDownField.prototype.loadFormData = function(value, data) {
        var select;
        select = this.form.findComponent(this.id);
        if (!select) {
          return;
        }
        if (this.readOnly) {
          return select.loadData(data);
        } else {
          if (value != null) {
            DropDownField.__super__.loadFormData.apply(this, arguments);
            return _.defer(function() {
              return select.select2('val', value + '');
            });
          } else {
            return select.select2('val', this.options.defaultValue || '');
          }
        }
      };

      DropDownField.prototype.getTemplateString = function() {
        return '<% if (readOnly) {%>\n    <div class="c-view-form-field">\n        <% if (!hideLabel) { %>\n        <div class="field-label"><%= label %></div>\n        <% } %>\n        <div id="<%= id %>" class="field-value">{{<%= name %>}}</div>\n    </div>\n<% } else { %>\n    <div class="control-group">\n        <% if (!hideLabel) { %>\n        <label class="control-label" for="<%= id %>"><%= label %><% if (required) { %>\n            <span class="required-mark">*</span>\n        <% } %></label><% } %>\n        <div class="controls">\n            <input type="hidden" id="<%= id %>" name="<%= name %>" value="{{appearFalse <%= value %>}}"/>\n          </div>\n    </div>\n<% } %>';
      };

      return DropDownField;

    })(FormField);
    FormField.add('dropdown', DropDownField);
    return DropDownField;
  });

}).call(this);
