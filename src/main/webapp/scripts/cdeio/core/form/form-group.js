// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'cdeio/core/form/form-field'], function($, _, FormField) {
    var FormGroup;
    return FormGroup = (function() {
      function FormGroup(form, options, fieldOptions) {
        var field, _i, _len;
        this.form = form;
        this.options = options;
        this.fieldOptions = fieldOptions;
        if (_.isString(options)) {
          this.options = options = {
            name: options
          };
        }
        if (this.options.columns) {
          this.cols = this.options.columns;
        }
        if (!_.isArray(fieldOptions)) {
          this.fieldOptions = fieldOptions = [fieldOptions];
        }
        this.containerId = _.uniqueId('group');
        this.visible = this.options.visible !== false;
        this.hiddenFields = [];
        this.fields = [];
        for (_i = 0, _len = fieldOptions.length; _i < _len; _i++) {
          field = fieldOptions[_i];
          if (this.options.readOnly === true) {
            if (_.isString(field)) {
              field = {
                name: field,
                type: 'text'
              };
            }
            field.readOnly = true;
          }
          if (this.options.disabled === true) {
            field.disabled = true;
          }
          (field.type === 'hidden' ? this.hiddenFields : this.fields).push(FormField.build(field, this, form));
        }
      }

      FormGroup.prototype.getColumns = function() {
        var field, _i, _len, _ref;
        if (!this.cols) {
          this.cols = 1;
          _ref = this.fields;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            if (field.colspan === 2) {
              this.cols = 2;
            }
          }
        }
        if (12 % this.cols !== 0) {
          throw new Error("unsupported columns:" + this.cols + ", only can be: 1, 2, 3, 4, 6, 12");
        }
        return this.cols;
      };

      FormGroup.prototype.getTemplateString = function() {
        return '<fieldset id="<%= containerId %>" class="c-form-group-cols-<%= columns %>" style="<% if (!visible) {%>display:none<%}%>">\n    <% if (label) { %>\n    <legend><span class="label label-info arrowed-in arrowed-in-right"><%= label %></span></legend>\n    <% } %>\n    <%= groupContent %>\n</fieldset>';
      };

      FormGroup.prototype.setVisible = function(visible) {
        var field, _i, _len, _ref, _results;
        this.visible = visible === false ? false : true;
        this.form.$(this.containerId)[this.visible ? 'show' : 'hide']();
        _ref = this.fields;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          _results.push(field.setVisible(this.visible));
        }
        return _results;
      };

      FormGroup.prototype.getRowTemplate = function() {
        return _.template('<div class="row-fluid"><%= items %></div>');
      };

      FormGroup.prototype.getItemTemplate = function() {
        return _.template('<div class="span<%= span %>"><%= field %></div>');
      };

      FormGroup.prototype.getTemplate = function() {
        var colspan, columns, contents, field, i, newRow, row, span, _i, _j, _len, _ref;
        contents = [];
        columns = this.getColumns();
        span = 12 / columns;
        row = [];
        newRow = (function(_this) {
          return function() {
            contents.push(_this.getRowTemplate()({
              items: row.join('')
            }));
            return row = [];
          };
        })(this);
        _ref = this.fields;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          field = _ref[i];
          colspan = field.colspan || 1;
          if (colspan > columns) {
            colspan = columns;
          }
          if (row.length + colspan > columns) {
            newRow();
          }
          row.push(this.getItemTemplate()({
            span: colspan * span,
            field: field.getTemplate()
          }));
          for (i = _j = 1; 1 <= colspan ? _j < colspan : _j > colspan; i = 1 <= colspan ? ++_j : --_j) {
            row.push('');
          }
          if (row.length === columns) {
            newRow();
          }
        }
        if (row.length > 0) {
          newRow();
        }
        return _.template(this.getTemplateString())({
          label: this.options.label,
          groupContent: contents.join(''),
          containerId: this.containerId,
          columns: this.getColumns(),
          visible: this.visible
        });
      };

      FormGroup.prototype.getHiddenFieldsTemplate = function() {
        var field;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = this.hiddenFields;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            _results.push(field.getTemplate());
          }
          return _results;
        }).call(this)).join('');
      };

      return FormGroup;

    })();
  });

}).call(this);
