// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'cdeio/core/base-view', 'cdeio/core/config', 'cdeio/core/model', 'cdeio/core/collection'], function($, _, BaseView, config, Model, Collection) {
    var View, getPath, viewTypes;
    getPath = config.getPath;
    View = (function(_super) {
      __extends(View, _super);

      function View(options) {
        var _ref, _ref1;
        this.options = options;
        this.baseName = options.baseName;
        this.feature = options.feature;
        this.module = options.module;
        this.model = options.model;
        View.__super__.constructor.call(this, options);
        this.deferredModel = this.initModel();
        this.deferredCollection = this.initCollection();
        if ((_ref = this.promises) != null) {
          _ref.push(this.deferredModel);
        }
        if ((_ref1 = this.promises) != null) {
          _ref1.push(this.deferredCollection);
        }
      }

      View.prototype.url = function() {
        return this.feature.url() + '/' + this.baseName;
      };

      View.prototype.initModel = function() {
        var deferred, u;
        deferred = $.Deferred();
        if (this.model) {
          if (_.isFunction(this.model)) {
            this.model = this.model.call(this);
          }
          if (_.isString(this.model)) {
            u = this.feature.module.getApplication().url(this.model);
            this.modelDefinition = Model.extend({
              url: function() {
                return u;
              }
            });
            this.model = new this.modelDefinition();
          }
          deferred.resolve();
          return deferred.promise();
        }
        if (!this.options.path) {
          this.model = this.feature.model;
          if (!this.feature.collection.extra) {
            this.feature.collection.extra = {};
          }
          if (this.options.extra && this.options.extra['_task_type']) {
            this.feature.collection.extra['_task_type'] = this.options.extra['_task_type'];
          }
          this.collection = this.feature.collection;
          deferred.resolve();
          return deferred.promise();
        }
        if (this.options.avoidLoadingModel === true) {
          this.modelDefinition = Model.extend({
            feature: this.feature,
            path: this.options.path
          });
          this.model = new this.modelDefinition();
          deferred.resolve();
          return deferred.promise();
        }
        this.module.loadResource(getPath(this.feature, 'model', this.options.path)).done((function(_this) {
          return function(def) {
            if (!def) {
              _this.modelDefinition = Model.extend({
                feature: _this.feature,
                path: _this.options.path
              });
              _this.model = new _this.modelDefinition();
              return deferred.resolve();
            } else {
              def.feature = _this.feature;
              def.path = _this.options.path;
              _this.modelDefinition = Model.extend(def);
              _this.model = new _this.modelDefinition();
              return deferred.resolve();
            }
          };
        })(this));
        return deferred.promise();
      };

      View.prototype.initCollection = function() {
        if (this.collection) {
          if (!this.collection.extra) {
            this.collection.extra = {};
          }
          if (this.options.extra && this.options.extra['_task_type']) {
            this.collection.extra['_task_type'] = this.options.extra['_task_type'];
          }
          return;
        }
        return this.deferredModel.done((function(_this) {
          return function() {
            return _this.collection = new (Collection.extend({
              feature: _this.feature,
              path: _this.options.path,
              extra: _this.options.extra || {}
            }))(null, {
              model: _this.modelDefinition
            });
          };
        })(this));
      };

      return View;

    })(BaseView);
    viewTypes = {};
    View.add = function(type, clazz) {
      return viewTypes[type] = clazz;
    };
    View.build = function(options) {
      var type;
      type = options.type;
      if (!type || !viewTypes[type]) {
        return new View(options);
      }
      return new viewTypes[type](options);
    };
    return View;
  });

}).call(this);
