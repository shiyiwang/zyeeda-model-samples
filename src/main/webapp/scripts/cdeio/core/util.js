// Generated by CoffeeScript 1.7.1
(function() {
  var changeDropdownSource, classToType, name, type, util, _i, _len, _ref,
    __slice = [].slice;

  classToType = {};

  _ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    classToType["[object " + name + "]"] = name.toLowerCase();
  }

  classToType['[object JavaClass]'] = 'class';

  classToType['[object JavaPackage]'] = 'package';

  type = function(obj) {
    var strType;
    strType = Object.prototype.toString.call(obj);
    return classToType[strType] || "object";
  };

  changeDropdownSource = function(el, data, textKey) {
    if (!textKey) {
      textKey = 'name';
    }
    return el.select2({
      width: '100%',
      query: function(q) {
        var d, result, t, text, _j, _len1;
        t = q.term;
        result = [];
        for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
          d = data[_j];
          text = d.text ? d.text : d[textKey];
          if (text.indexOf(t) >= 0) {
            result.push({
              id: d.id,
              text: text
            });
          }
        }
        return q.callback({
          results: result
        });
      },
      initSelection: function(e, fn) {
        var results, val;
        val = $(e).val();
        results = data;
        return _(results).each(function(item) {
          if (String(item.id) === String(val)) {
            return fn(item);
          }
        });
      }
    });
  };

  util = {
    getBaseName: function(base) {
      var str;
      str = [];
      str.push("[" + base.baseName + "]");
      if (base.path) {
        str.push("[" + (base.path()) + "]");
      } else if (base.module && base.feature) {
        str.push("[" + (base.module.path(base.feature.baseName)) + "]");
      } else if (base.module) {
        str.push("[" + (base.module.path()) + "]");
      }
      return str.join(' under ');
    },
    log: function() {
      var base, messages;
      base = arguments[0], messages = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!window.console) {
        return;
      }
      messages.unshift(util.getBaseName(base));
      return console.log.apply(console, messages);
    },
    error: function() {
      var base, messages;
      base = arguments[0], messages = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      messages.unshift(util.getBaseName(base));
      throw new Error(messages.join(' '));
    },
    join: function() {
      var cleanStartAndEndSlash, p, paths, result, _j, _k, _len1;
      paths = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cleanStartAndEndSlash = arguments[_j++];
      if (type(cleanStartAndEndSlash) === 'string') {
        paths.push(cleanStartAndEndSlash);
        cleanStartAndEndSlash = false;
      }
      result = '';
      for (_k = 0, _len1 = paths.length; _k < _len1; _k++) {
        p = paths[_k];
        result += '/' + p;
      }
      result = result.substring(1);
      result = result.replace(/(\/){2,3}/g, '/');
      if (cleanStartAndEndSlash) {
        result = result.replace(/(^\/)|(\/$)/g, '');
      }
      return result;
    },
    changeDropdownData: function(el, data, textKey) {
      if (data instanceof Array) {
        return changeDropdownSource(el, data, textKey);
      } else {
        return $.ajax(data, {
          dataType: 'json'
        }).done((function(_this) {
          return function(d) {
            return changeDropdownSource(el, d.results, textKey);
          };
        })(this));
      }
    },
    changePickerData: function(view, data) {
      var p, url;
      url = '';
      if (data instanceof Object) {
        for (p in data) {
          url += '&' + p + '=' + data[p];
        }
      } else {
        url = data;
      }
      view.options.dynamic = url;
      return true;
    }
  };

  define(util);

}).call(this);
