// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'cdeio/cdeio', 'cdeio/core/application', 'cdeio/core/browser', 'cdeio/core/component-handler', 'cdeio/core/config', 'cdeio/core/form-view', 'cdeio/core/custom-form-view', 'cdeio/vendors/jquery/jquery.gritter', 'cdeio/vendors/bootbox', 'cdeio/scaffold/scaffold', 'cdeio/features/viewport.feature/feature', 'cdeio/components/viewport', 'cdeio/components/launcher', 'cdeio/components/file-picker'], function($, _, cdeio, Application, detectBrowser, ComponentHandler, config) {
    var onContextLogin;
    onContextLogin = false;
    $(document).on('ajaxComplete', function(e, response, options) {
      var data, login, message, v, _i, _len, _ref;
      if (response.status === 422 && app) {
        data = JSON.parse(response.responseText);
        message = '';
        if (data.violations) {
          _ref = data.violations;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            if (v.message) {
              message += "<li>" + v.message + "</li>";
            }
          }
        }
        if (message !== '') {
          message = "<ul>" + message + "</ul>";
        }
        app.error('请求验证失败' + message);
      }
      if (response.status === 500 && app) {
        return app.error('系统错误');
      } else if (response.status === 401 && !onContextLogin) {
        onContextLogin = true;
        login = $('#LOGIN-DIALOG');
        if (login.length === 0) {
          login = $('<div class="modal hide fade" id="LOGIN-DIALOG">\n  <div class="modal-header">\n    <h3>上下文登录</h3>\n  </div>\n  <div class="modal-body">\n    <iframe src="" class="context-login-iframe"></iframe>\n  </div>\n</div>').appendTo(document.body);
          login.on('hidden', function() {
            return onContextLogin = false;
          });
        }
        $('iframe', login).attr('src', config.ssoProviderUrl);
        return login.modal({
          backdrop: 'static',
          keyboard: false
        });
      }
    });
    return function(options) {
      var action, application, modifyFeatureContainerDeferred, _fn, _i, _len, _ref;
      if (options == null) {
        options = {};
      }
      if (options.detectBrowser !== false) {
        detectBrowser();
      }
      application = new Application();
      application.addPromise(ComponentHandler.initialize());
      if (options.settingsPromise) {
        application.addPromise(options.settingsPromise.done(function() {
          return application.settings = config.settings;
        }));
      }
      if (options.useDefaultHome !== false) {
        modifyFeatureContainerDeferred = $.Deferred();
        application.done(function() {
          return application.startFeature('cdeio:viewport').done(function(homeFeature) {
            config.featureContainer = function(feature) {
              var start0, stop0, viewport;
              viewport = homeFeature.views['inline:viewport'].components[1];
              feature.activate = function() {
                return viewport.showFeature(feature);
              };
              start0 = _.bind(feature.start, feature);
              feature.start = function() {
                return start0().done(function() {
                  return viewport.showFeature(feature);
                });
              };
              stop0 = _.bind(feature.stop, feature);
              feature.stop = function() {
                stop0();
                return viewport.closeFeature(feature);
              };
              return viewport.createFeatureContainer(feature);
            };
            return modifyFeatureContainerDeferred.resolve();
          });
        });
        application.addPromise(modifyFeatureContainerDeferred);
      }
      if (options.useDefaultNotifier !== false) {
        _ref = ['message', 'info', 'success', 'warn', 'error'];
        _fn = function(action) {
          return application[action] = function(message) {
            if (_.isString(message)) {
              message = {
                text: message
              };
            }
            message.title = '系统消息';
            message.class_name = (action === 'message' ? '' : 'gritter-' + action);
            return $.gritter.add(message);
          };
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          action = _ref[_i];
          _fn(action);
        }
        application.alert = function(message) {
          return bootbox.alert(message);
        };
        application.confirm = function(message, fn) {
          var dialog, okbtn;
          dialog = bootbox.confirm(message, '取消', '确定', fn);
          okbtn = dialog.find('.btn-primary');
          return okbtn.click(function(e) {
            okbtn.removeClass('btn-primary');
            okbtn.addClass('btn-grey');
            return okbtn.bind('click', false);
          });
        };
        application.prompt = function(message, fn) {
          return bootbox.prompt(message, '取消', '确定', fn);
        };
      }
      return application;
    };
  });

}).call(this);
