// Generated by CoffeeScript 1.7.1
(function() {
  define(['underscore', 'cdeio/cdeio', 'cdeio/vendors/jquery/jquery.carouFredSel'], function(_, cdeio) {
    var FeatureRegistry, FeatureWindow, TaskBar;
    TaskBar = (function() {
      function TaskBar(options) {
        var carouselContainer, carouselWrapper, opt, _i, _len, _ref;
        this.defaultStartupOptionMap = {};
        _ref = options.defaultFeatureStartupOptions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opt = _ref[_i];
          if (opt.featurePath) {
            this.defaultStartupOptionMap[opt.featurePath] = opt;
          }
        }
        this.homepageFeaturePath = options.homepageFeaturePath;
        this.footerEl = options.el;
        this.footerEl.html('<div class="c-taskbar c-taskbar-pin">\n    <ul>\n        <li id="launcherEntry" class="c-taskbar-show-launcher">\n            <i class="c-taskbar-app-icon icon-globe"></i>\n            <div class="c-taskbar-app-text">所有应用</div>\n        </li>\n        <li id="homepageEntry" class="c-taskbar-show-homepage c-taskbar-app-selected">\n            <i class="c-taskbar-app-icon icon-cloud"></i>\n            <div class="c-taskbar-app-text">首页</div>\n        </li>\n    </ul>\n</div>\n<div class="c-taskbar c-taskbar-carousel">\n    <ul></ul>\n    <a href="javascript:void 0;" class="c-taskbar-prev"><i class="icon-chevron-left"></i></a>\n    <a href="javascript:void 0;" class="c-taskbar-next"><i class="icon-chevron-right"></i></a>\n</div>');
        this.pinWrapper = this.footerEl.children('.c-taskbar-pin');
        carouselWrapper = this.footerEl.children('.c-taskbar-carousel');
        carouselContainer = carouselWrapper.children('ul');
        carouselContainer.carouFredSel({
          circular: false,
          infinite: false,
          auto: false,
          align: 'left',
          prev: {
            button: carouselWrapper.children('.c-taskbar-prev')
          },
          next: {
            button: carouselWrapper.children('.c-taskbar-next')
          },
          onCreate: function() {
            return $(window).on('resize', function() {
              return carouselContainer.trigger('updateSizes');
            });
          }
        }, {
          debug: true
        });
        this.carouselContainer = carouselContainer;
      }

      TaskBar.prototype._clearSelected = function() {
        return this.footerEl.find('.c-taskbar-app-selected').removeClass('c-taskbar-app-selected');
      };

      TaskBar.prototype.add = function(feature) {
        var homepageEntry, item;
        if (feature.path() === this.homepageFeaturePath) {
          homepageEntry = this.pinWrapper.find('.c-taskbar-show-homepage');
          return homepageEntry.attr('data-feature-id', feature.cid);
        } else {
          this._clearSelected();
          _.extend(feature.startupOptions, this.defaultStartupOptionMap[feature.path()]);
          item = $("<li data-feature-id=\"" + feature.cid + "\" class=\"c-taskbar-app-selected\">\n    <i class=\"c-taskbar-app-icon " + feature.startupOptions.iconClass + "\"></i>\n    <div class=\"c-taskbar-app-text\">" + feature.startupOptions.name + "</div>\n    <button class=\"close c-taskbar-app-remove\">×</button>\n</li>");
          return this.carouselContainer.trigger('insertItem', [item]);
        }
      };

      TaskBar.prototype.scrollTo = function(featureId) {
        var item;
        this._clearSelected();
        item = this.pinWrapper.find("[data-feature-id=" + featureId + "]");
        if (item.length === 0) {
          item = this.carouselContainer.children("[data-feature-id=" + featureId + "]");
        }
        item.addClass('c-taskbar-app-selected');
        return this.carouselContainer.trigger('slideTo', item);
      };

      TaskBar.prototype.remove = function(featureId) {
        var d, item, me;
        me = this;
        item = me.carouselContainer.children("[data-feature-id=" + featureId + "]");
        d = $.Deferred();
        if ($.support.transition) {
          item.one($.support.transition.end, function() {
            me.carouselContainer.trigger('removeItem', item);
            return d.resolve();
          });
          item.css('opacity', 0);
        } else {
          me.carouselContainer.trigger('removeItem', item);
          d.resolve();
        }
        return d.promise();
      };

      return TaskBar;

    })();
    FeatureWindow = (function() {
      function FeatureWindow(mainEl) {
        this.viewportCarousel = mainEl;
      }

      FeatureWindow.prototype.add = function(featureContainer) {
        return this.viewportCarousel.append(featureContainer);
      };

      FeatureWindow.prototype.hideCurrent = function() {
        var current;
        current = this.viewportCarousel.children(':visible');
        return current.hide();
      };

      FeatureWindow.prototype.showNext = function(featureId) {
        var next;
        next = this.viewportCarousel.children("[data-feature-id=" + featureId + "]");
        return next.show();
      };

      FeatureWindow.prototype.remove = function(featureId) {
        var item;
        item = this.viewportCarousel.children("[data-feature-id=" + featureId + "]");
        return item.remove();
      };

      return FeatureWindow;

    })();
    FeatureRegistry = (function() {
      function FeatureRegistry() {
        this.registry = {};
        this.list = [];
      }

      FeatureRegistry.prototype.add = function(feature) {
        var featureId;
        featureId = feature.cid;
        this.registry[featureId] = feature;
        return this.list.push(featureId);
      };

      FeatureRegistry.prototype.remove = function(featureId) {
        var feature, idx;
        feature = this.registry[featureId];
        if (feature != null) {
          idx = _.lastIndexOf(this.list, featureId);
          this.list.splice(idx, 1);
          delete this.registry[featureId];
        }
        return feature;
      };

      FeatureRegistry.prototype.promote = function(featureId) {
        var feature, idx, item;
        feature = this.registry[featureId];
        if (feature != null) {
          idx = _.lastIndexOf(this.list, featureId);
          item = this.list.splice(idx, 1);
          this.list.push(item[0]);
        }
        return feature;
      };

      FeatureRegistry.prototype.contains = function(featureId) {
        return _.has(this.registry, featureId);
      };

      FeatureRegistry.prototype.pick = function() {
        var featureId;
        featureId = _.last(this.list);
        return this.registry[featureId];
      };

      FeatureRegistry.prototype.get = function(featureId) {
        return this.registry[featureId];
      };

      return FeatureRegistry;

    })();
    return cdeio.registerComponentHandler('viewport', (function() {}), function(el, options, view) {
      var defaultOptions, featureBar, featureRegistry, featureWindow, footerEl, mainEl, viewport;
      defaultOptions = {};
      options = _.extend(defaultOptions, options);
      mainEl = el.children('.c-viewport-content');
      footerEl = el.children('.c-viewport-footer');
      featureBar = new TaskBar({
        el: footerEl,
        defaultFeatureStartupOptions: options.defaultFeatureStartupOptions,
        homepageFeaturePath: options.homepageFeaturePath
      });
      featureWindow = new FeatureWindow(mainEl);
      featureRegistry = new FeatureRegistry();
      viewport = {
        showFeature: function(feature) {
          var featureId, me, _feature;
          me = this;
          featureId = feature.cid;
          if (featureRegistry.contains(featureId)) {
            _feature = featureRegistry.promote(featureId);
            return me._showFeature(_feature.cid);
          } else {
            featureRegistry.add(feature);
            featureBar.add(feature);
            return featureWindow.showNext(featureId);
          }
        },
        _showFeature: function(featureId) {
          featureBar.scrollTo(featureId);
          featureWindow.hideCurrent();
          return featureWindow.showNext(featureId);
        },
        closeFeature: function(feature) {
          var featureId, me;
          me = this;
          featureId = feature.cid;
          if (featureRegistry.contains(featureId)) {
            featureRegistry.remove(featureId);
            return featureBar.remove(featureId).done(function() {
              var nextFeature;
              nextFeature = featureRegistry.pick();
              if (nextFeature != null) {
                me._showFeature(nextFeature.cid);
              }
              return featureWindow.remove(featureId);
            });
          }
        },
        createFeatureContainer: function(feature) {
          var container;
          featureWindow.hideCurrent();
          container = $("<div data-feature-id='" + feature.cid + "' class='c-viewport-feature'></div>");
          featureWindow.add(container);
          return container;
        }
      };
      footerEl.delegate('li', 'click', function(event) {
        var $target, $this, feature, featureId;
        $this = $(this);
        $target = $(event.target);
        if ($target.hasClass('c-taskbar-app-remove')) {
          featureId = $this.attr('data-feature-id');
          feature = featureRegistry.get(featureId);
          view.feature.trigger('viewport:close-feature', view, feature);
          return;
        }
        featureId = $this.attr('data-feature-id');
        if (featureId != null) {
          return viewport._showFeature(featureId);
        } else {
          return view.feature.trigger('viewport:show-launcher', view);
        }
      });
      return viewport;
    });
  });

}).call(this);
