// Generated by CoffeeScript 1.7.1
define(['underscore', 'jquery', 'cdeio/cdeio', 'cdeio/core/view', 'cdeio/core/form-view', 'handlebars'], function(_, $, cdeio, View, FormView, H) {
  var Picker, PickerChooser;
  PickerChooser = (function() {
    function PickerChooser(picker) {
      this.picker = picker;
      this.feature = picker.view.feature;
      this.module = this.feature.module;
      this.app = this.module.getApplication();
      this.view = this.generateView();
      this.view.eventHandlers = this.getViewHandlers();
    }

    PickerChooser.prototype.generateView = function(dynamic) {
      var feature, options, pickerFeatureName, pickerFeatureType, pickerFiled, tpl, url;
      tpl = H.compile(this.getViewTemplate());
      pickerFiled = this.picker.name || '';
      feature = this.feature;
      pickerFeatureName = feature.baseName;
      pickerFeatureType = 'feature';
      if (feature.baseName === 'inline-grid') {
        pickerFeatureName = feature.startupOptions.gridOptions.form.feature.baseName;
        pickerFeatureType = 'inline-grid';
      }
      url = this.picker.options.url + '/picker?pickerFeatureName=' + pickerFeatureName + '&pickerFeatureType=' + pickerFeatureType + '&pickerFiled=' + pickerFiled;
      if (dynamic) {
        if (dynamic.indexOf('&') === 0) {
          url = url + dynamic;
        } else {
          url = dynamic;
        }
      }
      options = {
        feature: this.feature,
        module: this.module,
        baseName: 'picker-chooser',
        model: url,
        components: this.getViewComponents(),
        events: this.getViewEvents(),
        avoidLoadingHandlers: true,
        extend: {
          renderHtml: function(su, data) {
            return tpl(data);
          }
        }
      };
      this.verifyViewOptions(options);
      return new View(options);
    };

    PickerChooser.prototype.getViewTemplate = function() {
      return '<table id="grid"></table>';
    };

    PickerChooser.prototype.getViewComponents = function() {
      var grid;
      grid = _.extend({}, this.picker.options.grid, {
        type: 'grid',
        selector: 'grid',
        deferLoading: 0
      }, this.picker.options.multiple === true ? {
        multiple: true
      } : {}, this.picker.options.crossPage === true ? {
        crossPage: true
      } : {});
      return [grid];
    };

    PickerChooser.prototype.getViewEvents = function() {
      return {};
    };

    PickerChooser.prototype.getViewHandlers = function() {
      return {};
    };

    PickerChooser.prototype.verifyViewOptions = function(options) {};

    PickerChooser.prototype.getSelectedItems = function() {
      var grid, items, model, selected, _i, _len;
      grid = this.view.components[0];
      selected = grid.getSelected();
      if (!selected) {
        return false;
      }
      if (this.picker.options.multiple !== true) {
        selected = [selected];
      }
      items = [];
      for (_i = 0, _len = selected.length; _i < _len; _i++) {
        model = selected[_i];
        items.push(model.toJSON());
      }
      return items;
    };

    PickerChooser.prototype.show = function() {
      var beforeShowPicker, feature, handlers, pickerFeatureName, pickerFeatureType, pickerFiled, scaffold;
      feature = this.view.feature;
      pickerFeatureType = 'feature';
      if (feature.baseName === 'inline-grid') {
        feature = feature.startupOptions.gridOptions.form.feature;
        pickerFeatureType = 'inline-grid';
      }
      pickerFiled = this.picker.name || '';
      pickerFeatureName = feature.baseName;
      scaffold = feature.options.scaffold || {};
      handlers = scaffold.handlers || {};
      beforeShowPicker = handlers[this.picker.beforeShowPicker];
      if (_.isFunction(beforeShowPicker)) {
        if ((beforeShowPicker.call(this, this.view, pickerFiled, pickerFeatureType, pickerFeatureName)) !== true) {
          return;
        }
      }
      if (this.view.options.dynamic) {
        this.view = this.generateView(this.view.options.dynamic);
      }
      return this.app.showDialog({
        title: this.picker.options.title,
        view: this.view,
        buttons: [
          {
            label: this.picker.options.buttonLabel || '确定',
            status: 'btn-primary',
            fn: (function(_this) {
              return function() {
                var afterPickerConfirm, beforePickerConfirm, data, featureType, selected;
                selected = _this.getSelectedItems();
                if (!selected) {
                  _this.app.error('请选择记录');
                  return false;
                }
                if (!_this.picker.options.multiple) {
                  selected = selected[0];
                }
                feature = _this.view.feature;
                featureType = 'feature';
                if (feature.baseName === 'inline-grid') {
                  feature = feature.startupOptions.gridOptions.form.feature;
                  featureType = 'inline-grid';
                }
                scaffold = feature.options.scaffold || {};
                handlers = scaffold.handlers || {};
                beforePickerConfirm = handlers[_this.picker.beforePickerConfirm];
                if (_.isFunction(beforePickerConfirm)) {
                  if ((beforePickerConfirm.call(_this.picker, _this.picker.view, selected, featureType)) === false) {
                    return false;
                  }
                }
                data = _this.picker.setValue(selected, true);
                afterPickerConfirm = handlers[_this.picker.afterPickerConfirm];
                if (_.isFunction(afterPickerConfirm)) {
                  afterPickerConfirm.call(_this.picker, _this.picker.view, selected, featureType);
                }
                return data;
              };
            })(this)
          }
        ],
        onClose: function() {
          var _ref;
          return (_ref = this.view.findComponent('grid')) != null ? _ref.unbind('draw') : void 0;
        }
      }).done((function(_this) {
        return function() {
          var form, grid, selected;
          form = _this.picker.options.form;
          grid = _this.view.findComponent('grid');
          if (!grid) {
            return;
          }
          selected = _this.picker.getFormData() || [];
          grid.on('draw', function() {
            var d, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = selected.length; _i < _len; _i++) {
              d = selected[_i];
              _results.push(grid.find('#chk-' + d.id).prop('checked', true).prop('disabled', true));
            }
            return _results;
          });
          return grid.refresh();
        };
      })(this));
    };

    return PickerChooser;

  })();
  Picker = (function() {
    function Picker(options) {
      var Type, app, feature, url;
      this.options = options != null ? options : {};
      this.id = options.id || _.uniqueId('picker');
      this.name = options.name;
      this.value = options.value;
      this.text = options.text || this.value;
      this.container = options.container;
      this.view = options.view;
      this.triggerClass = options.triggerClass;
      this.allowAdd = options.allowAdd;
      this.callback = options.callback;
      this.afterPickerConfirm = options.afterPickerConfirm;
      this.beforeShowPicker = options.beforeShowPicker;
      this.beforePickerConfirm = options.beforePickerConfirm;
      if (options.chooser) {
        this.chooser = options.chooser;
      } else {
        Type = options.chooserType || PickerChooser;
        this.chooser = new Type(this);
      }
      if (this.allowAdd) {
        feature = this.view.feature;
        app = feature.module.getApplication();
        url = app.url("" + options.url + "/configuration/forms/add");
        this.addFormDeferred = $.Deferred();
        $.get(url).done((function(_this) {
          return function(data) {
            var def, view;
            def = _.extend({
              baseName: 'add',
              module: feature.module,
              feature: feature,
              avoidLoadingHandlers: true,
              entityLabel: data.entityLabel,
              formName: 'add'
            }, data);
            def.form = {
              groups: data.groups || [],
              tabs: data.tabs
            };
            view = new FormView(def);
            return _this.addFormDeferred.resolve(view, data.entityLabel);
          };
        })(this));
      }
    }

    Picker.prototype.getFormData = function() {
      var item, textKey, _i, _len, _ref;
      textKey = this.options.textKey || 'name';
      if (_.isArray(this.value)) {
        _ref = this.value;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (!item) {
            return {};
          }
          if (item.id) {
            ({
              id: item.id,
              name: item[textKey]
            });
          } else {
            ({});
          }
        }
      } else {
        if (!this.value) {
          return {};
        }
        if (this.value.id) {
          return {
            id: this.value.id,
            name: this.value[textKey]
          };
        } else {
          return {};
        }
      }
    };

    Picker.prototype.setText = function(text) {
      this.text = text;
      if (this.renderred === true) {
        return this.container.find('#text-' + this.id).html(text);
      }
    };

    Picker.prototype.setValue = function(value, isShowPicker) {
      var callback, data, feature, featureType, field, handlers, item, options, scaffold, t, target, text, _ref, _this;
      _this = this;
      feature = this.options.view.feature;
      featureType = 'feature';
      if (feature.baseName === 'inline-grid') {
        feature = this.options.view.feature.startupOptions.gridOptions.form.feature;
        featureType = 'inline-grid';
      }
      scaffold = feature.options.scaffold || {};
      handlers = scaffold.handlers || {};
      callback = handlers[this.callback];
      options = this.options;
      text = this.options.toText || function(data) {
        if (data) {
          return data[options.textKey] || data.name;
        } else {
          return '';
        }
      };
      if (_.isArray(value)) {
        t = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            item = value[_i];
            _results.push(text(item));
          }
          return _results;
        })()).join(',');
      } else {
        t = text(value);
      }
      this.setText(t);
      this.value = value;
      if (this.options.form && this.options.extraFields && value) {
        data = {};
        _ref = this.options.extraFields;
        for (field in _ref) {
          target = _ref[field];
          data[target] = value[field];
        }
        if ((_.isFunction(callback)) === true && isShowPicker !== true) {
          this.options.form.setFormData(data, true);
          return callback.call(_this, _this.options.view, value, featureType);
        } else {
          return this.options.form.setFormData(data, true);
        }
      }
    };

    Picker.prototype.loadData = function(data) {
      return this.setValue(this.name ? data[this.name] : data);
    };

    Picker.prototype.getTemplate = function() {
      return _.template('<div class="c-picker">\n    <span class="uneditable-input"><span class="text" id="text-<%= id %>"><%= text %></span>\n        <% if (allowAdd) { %><a id="add-<%= id %>" class="btn pull-right plus <%= triggerClass %>"><i class="icon-plus"/></a><% } %>\n        <a id="trigger-<%= id %>" class="btn pull-right <%= triggerClass %>"><i class="icon-search"/></a>\n    </span>\n</div>');
    };

    Picker.prototype.showAddForm = function() {
      if (!this.addFormDeferred) {
        return;
      }
      return this.addFormDeferred.done((function(_this) {
        return function(form, title) {
          var app, url;
          app = _this.options.view.feature.module.getApplication();
          url = app.url(_this.options.url);
          return app.showDialog({
            title: '新增' + title,
            view: form,
            buttons: [
              {
                label: '确定',
                status: 'btn-primary',
                fn: function() {
                  var data;
                  if (!form.isValid()) {
                    return false;
                  }
                  data = form.getFormData();
                  return $.post(url, data).done(function(data) {
                    form.reset();
                    return _this.setValue(data);
                  });
                }
              }
            ]
          });
        };
      })(this));
    };

    Picker.prototype.render = function() {
      if (this.renderred) {
        return;
      }
      this.renderred = true;
      this.container.html(this.getTemplate()(this));
      this.container.find('#trigger-' + this.id).click((function(_this) {
        return function() {
          return _this.chooser.show(_this);
        };
      })(this));
      return this.container.find('#add-' + this.id).click((function(_this) {
        return function() {
          return _this.showAddForm();
        };
      })(this));
    };

    return Picker;

  })();
  return {
    Picker: Picker,
    Chooser: PickerChooser
  };
});
