// Generated by CoffeeScript 1.7.1
(function() {
  define(['underscore', 'jquery', 'cdeio/cdeio', 'handlebars'], function(_, $, cdeio, Handlebars) {
    var active, block, deactive, hide, prepareDomElements, show, showTop, template, transition;
    cdeio.registerComponentHandler('launcher', (function() {}), function(el, options, view) {
      var component, data, fake, folder, folders, item, map, o, row, _i, _j, _k, _len, _len1, _len2, _ref;
      data = options.data || [];
      map = {};
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        map[item.id] = item;
      }
      folders = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
          item = data[_j];
          if (!item.parent) {
            _results.push(item);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = folders.length; _j < _len1; _j++) {
        folder = folders[_j];
        folder.rows = (function() {
          var _k, _len2, _ref, _results;
          _results = [];
          for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
            item = data[_k];
            if (((_ref = item.parent) != null ? _ref.id : void 0) === folder.id) {
              _results.push(item);
            }
          }
          return _results;
        })();
        _ref = folder.rows;
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          row = _ref[_k];
          row.items = (function() {
            var _l, _len3, _ref1, _results;
            _results = [];
            for (_l = 0, _len3 = data.length; _l < _len3; _l++) {
              item = data[_l];
              if (((_ref1 = item.parent) != null ? _ref1.id : void 0) === row.id) {
                _results.push(item);
              }
            }
            return _results;
          })();
        }
        if (_.every(folder.rows, function(e) {
          return e.items.length === 0;
        })) {
          fake = [
            {
              id: 'fake-' + folder.id,
              name: folder.name,
              items: folder.rows
            }
          ];
          folder.rows = fake;
        }
      }
      o = prepareDomElements({
        folders: folders
      });
      o.show = _.bind(show, this, o);
      o.hide = _.bind(hide, this, o);
      o.showTop = _.bind(showTop, this, o);
      component = {
        show: o.show,
        hide: o.hide
      };
      o.container.click(function() {
        return o.hide();
      });
      $('.c-launcher-box', o.bottom).click(function(e) {
        var p;
        e.stopPropagation();
        p = $(this).parent();
        return o.showTop(p);
      });
      $('.c-launcher-top-row-item', o.top).click(function() {
        var id, object;
        if (block.length !== 0) {
          return;
        }
        id = $(this).attr('id');
        object = map[id];
        return view.feature.trigger('launcher:launch', view, component, object);
      });
      el.click(function() {
        return o.show();
      });
      return component;
    });
    block = [];
    transition = function(start, end) {
      var el;
      if (!$.support.transition) {
        start();
        return end();
      } else {
        el = start();
        block.push(el);
        return el.one($.support.transition.end, function() {
          end();
          return block.pop();
        });
      }
    };
    active = function(el) {
      return el.addClass('active');
    };
    deactive = function(el) {
      return el.removeClass('active');
    };
    show = function(o) {
      if (o.started === true) {
        return;
      }
      o.started = true;
      $('.active', o.container).removeClass('active');
      while (block.length !== 0) {
        block.pop();
      }
      $('> *', o.topHelper).appendTo(o.top);
      delete o.activeFolder;
      delete o.activeContent;
      active(o.container);
      return transition(function() {
        o.container[0].offsetWidth;
        return active(o.bottom);
      }, function() {
        return active(o.top);
      });
    };
    hide = function(o) {
      if (block.length !== 0) {
        return;
      }
      transition(function() {
        return o.top.css('opacity', 0);
      }, function() {
        deactive(o.top);
        o.top.css('opacity', '');
        return o.top.css('height', 0);
      });
      transition(function() {
        return o.bottom.css('opacity', 0);
      }, function() {
        deactive(o.bottom);
        deactive(o.container);
        o.bottom.css('opacity', '');
        return o.started = false;
      });
      if (o.activeFolder) {
        deactive(o.activeFolder);
        deactive($('.c-launcher-arrow', o.activeFolder));
        delete o.activeFolder;
      }
      if (o.activeContent) {
        deactive(o.activeContent);
        return delete o.activeContent;
      }
    };
    showTop = function(o, p) {
      var content, h, height, id;
      if (p.hasClass('active') || block.length !== 0) {
        return;
      }
      if (o.activeFolder) {
        deactive(o.activeFolder);
        deactive($('.c-launcher-arrow', o.activeFolder));
        active(o.arrowHelper);
        transition(function() {
          return o.arrowHelper.css('left', $('.c-launcher-arrow', p).position().left);
        }, function() {
          active($('.c-launcher-arrow', p));
          return deactive(o.arrowHelper);
        });
      } else {
        o.arrowHelper.css('left', $('.c-launcher-arrow', p).position().left);
        active($('.c-launcher-arrow', p));
      }
      o.activeFolder = active(p);
      id = 'c-' + p.attr('id');
      content = $('#' + id, o.top);
      active(content);
      height = o.contentHeights[id];
      transition(function() {
        return o.top.height(height);
      }, function() {});
      if (o.activeContent) {
        o.activeContent.appendTo(o.topHelper);
        content.appendTo(o.topHelper);
        h = o.contentHeights[o.activeContent.attr('id')];
        transition(function() {
          return o.topHelper.css('top', -h);
        }, function() {
          var first, second, _ref;
          _ref = o.topHelper.children(), first = _ref[0], second = _ref[1];
          deactive($(first));
          $(first).appendTo(o.top);
          $(second).appendTo(o.top);
          return o.topHelper.css('top', 0);
        });
      }
      return o.activeContent = content;
    };
    template = Handlebars.compile('<div class="c-launcher-container" id="{{id}}">\n  <div class="c-launcher-top">\n    <!--<div class="c-launcher-top-shadow"></div>-->\n    <div class="c-launcher-top-helper"/>\n    {{#each folders}}\n    <div class="c-launcher-top-content" id="c-{{id}}">\n        {{#each rows}}\n        <div class="c-launcher-top-row">\n            <div class="c-launcher-top-row-title">{{name}}</div>\n            <div class="c-launcher-top-row-items">\n            {{#each items}}\n                <div class="c-launcher-top-row-item" id="{{id}}">\n                    <i class="c-launcher-top-row-item-icon {{iconClass}}">{{icon}}</i>\n                    <div class="c-launcher-top-row-item-label">{{name}}</div>\n                </div>\n            {{/each}}\n            </div>\n            <div class="c-launcher-clear"></div>\n        </div>\n        {{/each}}\n    </div>\n    {{/each}}\n  </div>\n  <div class="c-launcher-bottom">\n    <div class="c-launcher-arrow-helper"/>\n    {{#each folders}}\n    <div class="c-launcher-folder" id="{{id}}">\n      <div class="c-launcher-arrow"/>\n      <div class="c-launcher-box">\n        <i class="c-launcher-icon {{iconClass}}">{{icon}}</i>\n        <div class="c-launcher-label">{{name}}</div>\n      </div>\n    </div>\n    {{/each}}\n  </div>\n</div>');
    return prepareDomElements = function(options) {
      var bottom, container, helper, id, result, t, top;
      id = _.uniqueId('launcher');
      options.id = id;
      t = template(options);
      $(t).appendTo($(document.body));
      $('<div id="' + id + '-helper" class="c-launcher-helper"/>').appendTo($(document.body));
      container = $('#' + id);
      top = $('.c-launcher-top', container);
      bottom = $('.c-launcher-bottom', container);
      helper = $('#' + id + '-helper');
      result = {
        container: container,
        top: top,
        bottom: bottom,
        helper: helper,
        topHelper: $('.c-launcher-top-helper', top),
        arrowHelper: $('.c-launcher-arrow-helper', bottom),
        contentHeights: {}
      };
      $('.c-launcher-top-content', result.top).appendTo(result.helper);
      $('.c-launcher-top-content', result.helper).each(function() {
        var me;
        me = $(this);
        active(me);
        result.contentHeights[me.attr('id')] = me.height() + 40;
        return deactive(me);
      });
      $('.c-launcher-top-content', result.helper).appendTo(result.top);
      return result;
    };
  });

}).call(this);
