// Generated by CoffeeScript 1.7.1
(function() {
  define(['underscore', 'jquery', 'cdeio/cdeio', 'cdeio/vendors/jquery/ztree/jquery.ztree.all'], function(_, $, cdeio) {
    var addTreeData, buildRootNode, dndEvents, editEvents, loadAllData, mouseEvents, normalEvents, resetId;
    addTreeData = function(tree, data, parent, extraProperties, root) {
      var simpleData, value, _i, _j, _len, _len1;
      if (parent == null) {
        parent = null;
      }
      simpleData = tree.setting.data.simpleData;
      if (_.isFunction(simpleData.pId)) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          value = data[_i];
          value.pId = simpleData.pId(value);
        }
      }
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        value = data[_j];
        if (extraProperties) {
          _.extend(value, extraProperties);
        }
      }
      if (root) {
        resetId(data, root);
        data.unshift(root);
      }
      return tree.addNodes(parent, data, false);
    };
    loadAllData = function(view, tree, root) {
      return $.when(view.collection.fetch()).done(function() {
        var data;
        data = view.collection.toJSON();
        return addTreeData(tree, data, null, null, root);
      });
    };
    resetId = function(nodes, root) {
      var d, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        d = nodes[_i];
        if (!d.pId && root.id === '-1') {
          _results.push(d.pId = root.id);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    buildRootNode = function(options) {
      var rootNodeSetting, _ref;
      rootNodeSetting = options.rootNodeSetting || {};
      if (options.root) {
        return {
          name: options.root,
          isRoot: true,
          checked: rootNodeSetting.checked || false,
          chkDisabled: rootNodeSetting.chkDisabled || false,
          halfCheck: rootNodeSetting.halfCheck || false,
          icon: rootNodeSetting.icon || '',
          iconClose: rootNodeSetting.iconClose || '',
          iconOpen: rootNodeSetting.iconClose || '',
          iconSkin: rootNodeSetting.iconSkin || '',
          isParent: true,
          nocheck: rootNodeSetting.nocheck || false,
          target: rootNodeSetting.target || '',
          url: rootNodeSetting.url || '',
          id: ((_ref = options.data) != null ? _ref.rootPId : void 0) || '-1'
        };
      }
    };
    normalEvents = ['beforeAsync', 'beforeCheck', 'beforeClick', 'beforeCollapse', 'beforeDblClick', 'beforeExpand', 'beforeRightClick', 'onAsyncError', 'onAsyncSuccess', 'onCheck', 'onClick', 'onCollapse', 'onDblClick', 'onExpand', 'onRightClick'];
    dndEvents = ['beforeDrag', 'beforeDragOpen', 'beforeDrop', 'onDrag', 'onDrop'];
    editEvents = ['beforeEditName', 'beforeRemove', 'beforeRename', 'onNodeCreated', 'onRemove', 'onRename'];
    mouseEvents = ['beforeMouseDown', 'beforeMouseUp', 'onMouseDown', 'onMouseUp'];
    return cdeio.registerComponentHandler('tree', (function() {}), function(el, opt, view) {
      var bk, callback, cb, cbEvents, eventHost, name, options, root, simpleData, tree, value, _i, _len;
      options = _.extend({}, opt);
      delete options.async;
      options.data || (options.data = {});
      simpleData = _.extend({}, options.data.simpleData);
      simpleData.enable = true;
      if (!simpleData.pId) {
        simpleData.pId = (function(dataRow) {
          var _ref;
          return (_ref = dataRow.parent) != null ? _ref.id : void 0;
        });
      }
      options.data.simpleData = simpleData;
      cbEvents = [].concat(normalEvents);
      if (options.enableDndEvents === true) {
        cbEvents = cbEvents.concat(dndEvents);
      }
      if (options.enableEditEvents === true) {
        cbEvents = cbEvents.concat(editEvents);
      }
      if (options.enableMouseEvents === true) {
        cbEvents = cbEvents.concat(mouseEvents);
      }
      callback = _.extend({}, options.callback);
      cb = {};
      eventHost = {};
      for (_i = 0, _len = cbEvents.length; _i < _len; _i++) {
        name = cbEvents[_i];
        cb[name] = view.feature.delegateComponentEvent(view, eventHost, 'tree:' + name, callback[name]);
        delete callback[name];
      }
      for (name in callback) {
        value = callback[name];
        cb[name] = view.bindEventHandler(value);
      }
      options.callback = cb;
      root = buildRootNode(options);
      if (options.treeData) {
        if (root) {
          resetId(options.treeData, root);
          tree = $.fn.zTree.init(el, options, [root].concat(options.treeData));
        } else {
          tree = $.fn.zTree.init(el, options, options.treeData);
        }
      } else {
        if (options.isAsync === true) {
          options.callback.onExpand = function(e, treeId, treeNode) {
            var filters, id, idName;
            if ((treeNode != null ? treeNode['__inited__'] : void 0) === true) {
              return;
            }
            treeNode && (treeNode['__inited__'] = true);
            tree = $.fn.zTree.getZTreeObj(treeId);
            simpleData = tree.setting.data.simpleData;
            idName = simpleData.idKey || 'id';
            id = treeNode === null ? (simpleData.rootPId ? simpleData.rootPId : false) : treeNode[idName];
            if (id === '-1') {
              id = null;
            }
            filters = id ? [['eq', 'parent.id', id]] : [['null', 'parent']];
            return $.when(view.collection.fetch({
              data: {
                _filters: filters
              }
            })).done(function(data) {
              return addTreeData(tree, view.collection.toJSON(), treeNode, {
                isParent: true
              });
            });
          };
          if (root) {
            tree = $.fn.zTree.init(el, options, [root]);
            tree.expandNode(tree.getNodeByParam('id', root.id), true, false, true, true);
          } else {
            tree = $.fn.zTree.init(el, options, []);
            options.callback.onExpand(null, tree.setting.treeId, null);
          }
        } else {
          tree = $.fn.zTree.init(el, options, []);
          loadAllData(view, tree, root);
          if (root) {
            tree.expandNode(root, true, false, true, true);
          }
        }
      }
      tree.reload = function() {
        var data;
        if (options.treeData) {
          return;
        }
        data = $.fn.zTree._z.data;
        data.initCache(this.setting);
        data.initRoot(this.setting);
        this.setting.treeObj.empty();
        root = buildRootNode(options);
        if (options.isAsync === true) {
          if (root) {
            tree.addNodes(null, [root], true);
            return tree.expandNode(tree.getNodeByParam('id', root.id), true, false, true, true);
          } else {
            return options.callback.onExpand(null, tree.setting.treeId, null);
          }
        } else {
          loadAllData(view, tree, root);
          if (root) {
            return tree.expandNode(root, true, false, true, true);
          }
        }
      };
      bk = tree.getSelectedNodes;
      tree.getSelectedNodes = function() {
        var node, nodes, _j, _len1, _results;
        nodes = bk.apply(tree);
        _results = [];
        for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
          node = nodes[_j];
          if (!node.isRoot) {
            _results.push(node);
          }
        }
        return _results;
      };
      eventHost.component = tree;
      return tree;
    });
  });

}).call(this);
